{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FreshMart - Supermarket Web Application\n\n## Overview\n\nFreshMart is a full-stack supermarket web application similar to Swiggy Instamart/Blinkit that enables customers to browse and purchase groceries online with fast delivery. The application features a modern React frontend with TypeScript and a Node.js/Express backend, providing functionality for product browsing, cart management, order processing, and payment integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with protected routes based on authentication\n- **UI Framework**: Shadcn/UI components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Authentication**: Session-based authentication with OpenID Connect (Replit Auth)\n- **Payment Processing**: Stripe integration for secure payment handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with OpenID Connect strategy for Replit authentication\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **API Design**: RESTful API endpoints with proper error handling and logging middleware\n\n### Database Layer\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Connection**: Neon serverless driver with WebSocket support\n\n### Key Data Models\n- **Users**: Customer and admin user management with Stripe integration\n- **Categories**: Product categorization (Vegetables, Fruits, Dairy, Snacks, Beverages)\n- **Products**: Inventory management with pricing, stock, and images\n- **Cart**: User shopping cart with quantity management\n- **Orders**: Order processing with status tracking and delivery options\n- **Coupons**: Discount code system with validation\n- **Feedback**: Customer rating and review system\n\n### Authentication & Authorization\n- **Strategy**: OpenID Connect with Replit as identity provider\n- **Session Storage**: PostgreSQL-backed sessions with TTL management\n- **Role-based Access**: Customer and admin role separation\n- **Protected Routes**: Client-side route protection with authentication checks\n\n### Payment Integration\n- **Provider**: Stripe for payment processing\n- **Implementation**: Stripe Elements for secure card input with server-side payment intent creation\n- **Security**: Environment-based API key management with test mode support\n\n### File Structure & Organization\n- **Monorepo Structure**: Shared schema definitions between client and server\n- **Client**: React application with component-based architecture\n- **Server**: Express API with modular route organization\n- **Shared**: Common TypeScript types and database schema definitions\n\n### Development & Build Process\n- **Development**: Vite dev server with HMR and Express backend integration\n- **Build**: Separate client (Vite) and server (esbuild) build processes\n- **Type Safety**: Full TypeScript coverage with strict configuration\n- **Code Organization**: Path aliases for clean imports and modular structure\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, Wouter for routing\n- **Build Tools**: Vite with TypeScript support and React plugin\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n\n### UI Component Libraries\n- **Radix UI**: Complete set of accessible UI primitives (@radix-ui/react-*)\n- **Utility Libraries**: clsx and tailwind-merge for conditional styling\n- **Icons**: Lucide React for consistent iconography\n\n### Backend Dependencies\n- **Express.js**: Web framework with middleware support\n- **Authentication**: Passport.js with OpenID Connect strategy\n- **Session Management**: express-session with connect-pg-simple store\n- **Database**: Drizzle ORM with Neon PostgreSQL driver\n\n### Payment & External Services\n- **Stripe**: Payment processing with @stripe/stripe-js and @stripe/react-stripe-js\n- **Database**: Neon serverless PostgreSQL with WebSocket support\n\n### State Management & Data Fetching\n- **TanStack Query**: Server state management with caching and synchronization\n- **Form Handling**: React Hook Form with Zod validation\n- **Date Utilities**: date-fns for date formatting and manipulation\n\n### Development Tools\n- **TypeScript**: Strict type checking with ES modules\n- **Replit Integration**: Development plugins for Replit environment\n- **Build Optimization**: esbuild for server bundling, Vite for client","size_bytes":4802},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        inter: ['Inter', 'sans-serif'],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          200: \"var(--primary-200)\",\n          300: \"var(--primary-300)\",\n          400: \"var(--primary-400)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n          800: \"var(--primary-800)\",\n          900: \"var(--primary-900)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          50: \"var(--secondary-50)\",\n          100: \"var(--secondary-100)\",\n          200: \"var(--secondary-200)\",\n          300: \"var(--secondary-300)\",\n          400: \"var(--secondary-400)\",\n          500: \"var(--secondary-500)\",\n          600: \"var(--secondary-600)\",\n          700: \"var(--secondary-700)\",\n          800: \"var(--secondary-800)\",\n          900: \"var(--secondary-900)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n          500: \"#2563eb\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            transform: \"translateY(20px)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3515},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { \n  insertProductSchema, \n  insertCategorySchema, \n  insertCartItemSchema, \n  insertOrderSchema, \n  insertCouponSchema, \n  insertFeedbackSchema \n} from \"@shared/schema\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:slug\", async (req, res) => {\n    try {\n      const category = await storage.getCategoryBySlug(req.params.slug);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error fetching category:\", error);\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validatedData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      let products;\n\n      if (search) {\n        products = await storage.searchProducts(search as string);\n      } else if (category) {\n        const categoryData = await storage.getCategoryBySlug(category as string);\n        if (!categoryData) {\n          return res.status(404).json({ message: \"Category not found\" });\n        }\n        products = await storage.getProductsByCategory(categoryData.id);\n      } else {\n        products = await storage.getProducts();\n      }\n\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const updatedProduct = await storage.updateProduct(req.params.id, req.body);\n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const cartItems = await storage.getCartItems(userId);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post(\"/api/cart\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertCartItemSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const cartItem = await storage.addToCart(validatedData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.put(\"/api/cart/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { quantity } = req.body;\n      const cartItem = await storage.updateCartItem(req.params.id, quantity);\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.removeFromCart(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete(\"/api/cart\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.clearCart(userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Order routes\n  app.get(\"/api/orders\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // Admin can see all orders, regular users see only their orders\n      const orders = user?.role === 'admin' \n        ? await storage.getOrders() \n        : await storage.getOrders(userId);\n      \n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const order = await storage.getOrder(req.params.id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Users can only see their own orders unless they're admin\n      if (user?.role !== 'admin' && order.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Generate order number\n      const orderNumber = `FM${Date.now()}`;\n      \n      const validatedData = insertOrderSchema.parse({\n        ...req.body,\n        userId,\n        orderNumber,\n      });\n      \n      const order = await storage.createOrder(validatedData);\n      \n      // Create order items if provided\n      if (req.body.items && Array.isArray(req.body.items)) {\n        const orderItems = req.body.items.map((item: any) => ({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          price: item.price,\n        }));\n        \n        await storage.createOrderItems(orderItems);\n      }\n      \n      // Clear user's cart\n      await storage.clearCart(userId);\n      \n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Coupon routes\n  app.get(\"/api/coupons\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const coupons = await storage.getCoupons();\n      res.json(coupons);\n    } catch (error) {\n      console.error(\"Error fetching coupons:\", error);\n      res.status(500).json({ message: \"Failed to fetch coupons\" });\n    }\n  });\n\n  app.post(\"/api/coupons/validate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { code, orderAmount } = req.body;\n      const coupon = await storage.getCouponByCode(code);\n      \n      if (!coupon) {\n        return res.status(404).json({ message: \"Invalid coupon code\" });\n      }\n      \n      // Check validity\n      const now = new Date();\n      if (coupon.validUntil && new Date(coupon.validUntil) < now) {\n        return res.status(400).json({ message: \"Coupon has expired\" });\n      }\n      \n      if (coupon.usageLimit && coupon.usageCount >= coupon.usageLimit) {\n        return res.status(400).json({ message: \"Coupon usage limit exceeded\" });\n      }\n      \n      if (orderAmount < parseFloat(coupon.minOrderAmount)) {\n        return res.status(400).json({ \n          message: `Minimum order amount of ₹${coupon.minOrderAmount} required` \n        });\n      }\n      \n      // Calculate discount\n      let discountAmount = 0;\n      if (coupon.discountType === 'percentage') {\n        discountAmount = (orderAmount * parseFloat(coupon.discountValue)) / 100;\n        if (coupon.maxDiscountAmount) {\n          discountAmount = Math.min(discountAmount, parseFloat(coupon.maxDiscountAmount));\n        }\n      } else {\n        discountAmount = parseFloat(coupon.discountValue);\n      }\n      \n      res.json({\n        valid: true,\n        discountAmount,\n        coupon,\n      });\n    } catch (error) {\n      console.error(\"Error validating coupon:\", error);\n      res.status(500).json({ message: \"Failed to validate coupon\" });\n    }\n  });\n\n  app.post(\"/api/coupons\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertCouponSchema.parse(req.body);\n      const coupon = await storage.createCoupon(validatedData);\n      res.status(201).json(coupon);\n    } catch (error) {\n      console.error(\"Error creating coupon:\", error);\n      res.status(500).json({ message: \"Failed to create coupon\" });\n    }\n  });\n\n  // Feedback routes\n  app.get(\"/api/feedback\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const feedback = await storage.getFeedback();\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error fetching feedback:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback\" });\n    }\n  });\n\n  app.post(\"/api/feedback\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertFeedbackSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const feedback = await storage.createFeedback(validatedData);\n      res.status(201).json(feedback);\n    } catch (error) {\n      console.error(\"Error creating feedback:\", error);\n      res.status(500).json({ message: \"Failed to create feedback\" });\n    }\n  });\n\n  // Admin dashboard stats\n  app.get(\"/api/admin/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Stripe payment route for one-time payments\n  app.post(\"/api/create-payment-intent\", isAuthenticated, async (req, res) => {\n    try {\n      const { amount, orderId } = req.body;\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"inr\",\n        metadata: {\n          orderId: orderId || \"\",\n        },\n      });\n      \n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Update payment status\n  app.post(\"/api/payments/confirm\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { paymentIntentId, orderId } = req.body;\n      \n      // Verify payment with Stripe\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      \n      if (paymentIntent.status === 'succeeded') {\n        await storage.updateOrderPaymentStatus(orderId, 'completed', paymentIntentId);\n        await storage.updateOrderStatus(orderId, 'processing');\n        res.json({ success: true });\n      } else {\n        await storage.updateOrderPaymentStatus(orderId, 'failed', paymentIntentId);\n        res.status(400).json({ message: \"Payment not successful\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ message: \"Error confirming payment: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15660},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { categories, products } from \"@shared/schema\";\n\nconst sampleCategories = [\n  {\n    name: \"Vegetables\",\n    slug: \"vegetables\",\n    description: \"Fresh and organic vegetables sourced directly from farms\",\n    imageUrl: \"https://images.unsplash.com/photo-1590779033100-9f60a05a013d?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\",\n    isActive: true,\n  },\n  {\n    name: \"Fruits\",\n    slug: \"fruits\", \n    description: \"Seasonal fresh fruits packed with natural goodness\",\n    imageUrl: \"https://images.unsplash.com/photo-1610832958506-aa56368176cf?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\",\n    isActive: true,\n  },\n  {\n    name: \"Dairy\",\n    slug: \"dairy\",\n    description: \"Farm fresh dairy products and milk\",\n    imageUrl: \"https://images.unsplash.com/photo-1563636619-e9143da7973b?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\",\n    isActive: true,\n  },\n  {\n    name: \"Snacks\",\n    slug: \"snacks\",\n    description: \"Healthy snacks and packaged foods\",\n    imageUrl: \"https://images.unsplash.com/photo-1599490659213-e2b9527bd087?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\",\n    isActive: true,\n  },\n  {\n    name: \"Beverages\",\n    slug: \"beverages\",\n    description: \"Refreshing drinks and healthy beverages\",\n    imageUrl: \"https://images.unsplash.com/photo-1544145945-f90425340c7e?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\",\n    isActive: true,\n  },\n];\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Starting database seeding...\");\n\n    // Clear existing data\n    await db.delete(products);\n    await db.delete(categories);\n\n    // Insert categories\n    console.log(\"Inserting categories...\");\n    const insertedCategories = await db.insert(categories).values(sampleCategories).returning();\n    \n    const categoryMap = new Map();\n    insertedCategories.forEach(cat => {\n      categoryMap.set(cat.slug, cat.id);\n    });\n\n    // Sample products for each category\n    const sampleProducts = [\n      // Vegetables\n      {\n        name: \"Organic Tomatoes\",\n        description: \"Fresh, juicy organic tomatoes perfect for cooking and salads\",\n        price: \"60.00\",\n        originalPrice: \"80.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1518977676601-b53f82aba655?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 50,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Onions\",\n        description: \"Premium quality onions, essential for every kitchen\",\n        price: \"40.00\",\n        originalPrice: \"50.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1508747703725-719777637510?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 75,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Bell Peppers\",\n        description: \"Colorful bell peppers rich in vitamins and antioxidants\",\n        price: \"120.00\",\n        originalPrice: \"150.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1525607551316-4a8e16d1c30b?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Carrots\",\n        description: \"Sweet and crunchy carrots, perfect for snacking and cooking\",\n        price: \"45.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1598170845058-32b9d6a5da37?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 60,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Green Spinach\",\n        description: \"Fresh leafy spinach packed with iron and nutrients\",\n        price: \"35.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1576045057995-568f588f82fb?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 40,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Potatoes\",\n        description: \"Premium quality potatoes for all your cooking needs\",\n        price: \"30.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1518977676601-b53f82aba655?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 100,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Green Broccoli\",\n        description: \"Fresh broccoli florets rich in vitamins and minerals\",\n        price: \"80.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1459411552884-841db9b3cc2a?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 25,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Cucumber\",\n        description: \"Crisp and refreshing cucumbers perfect for salads\",\n        price: \"25.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1604977042946-1eecc30f269e?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 45,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Green Capsicum\",\n        description: \"Fresh green capsicum with a crisp texture and mild flavor\",\n        price: \"50.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1563565375-f3fdfdbefa83?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 35,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Cauliflower\",\n        description: \"Premium white cauliflower perfect for various dishes\",\n        price: \"60.00\",\n        weight: \"1 piece\",\n        unit: \"piece\",\n        imageUrl: \"https://images.unsplash.com/photo-1568584711271-9f4c71de25e6?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 20,\n        categoryId: categoryMap.get(\"vegetables\"),\n        isActive: true,\n      },\n\n      // Fruits\n      {\n        name: \"Fresh Bananas\",\n        description: \"Sweet and ripe bananas rich in potassium\",\n        price: \"40.00\",\n        weight: \"1 dozen\",\n        unit: \"dozen\",\n        imageUrl: \"https://images.unsplash.com/photo-1571771894821-ce9b6c11b08e?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 80,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Red Apples\",\n        description: \"Crisp and sweet red apples, perfect for snacking\",\n        price: \"150.00\",\n        originalPrice: \"180.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 60,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Oranges\",\n        description: \"Juicy oranges packed with vitamin C\",\n        price: \"80.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1547036967-23d11aacaee0?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 45,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Green Grapes\",\n        description: \"Sweet and seedless green grapes\",\n        price: \"120.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1567306226416-28f0efdc88ce?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Mangoes\",\n        description: \"Sweet and juicy mangoes, the king of fruits\",\n        price: \"200.00\",\n        originalPrice: \"250.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1601493700631-2b16ec4b4716?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 25,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Pineapple\",\n        description: \"Sweet and tangy pineapple rich in vitamins\",\n        price: \"90.00\",\n        weight: \"1 piece\",\n        unit: \"piece\",\n        imageUrl: \"https://images.unsplash.com/photo-1589820296156-2454bb8a6ad1?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 15,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Watermelon\",\n        description: \"Refreshing watermelon perfect for summer\",\n        price: \"40.00\",\n        weight: \"1 kg\",\n        unit: \"kg\",\n        imageUrl: \"https://images.unsplash.com/photo-1587049352846-4a222e784d38?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 20,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Strawberries\",\n        description: \"Sweet and juicy strawberries rich in antioxidants\",\n        price: \"180.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1464965911861-746a04b4bca6?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 10,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Kiwi\",\n        description: \"Tangy kiwi fruits packed with vitamin C\",\n        price: \"160.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1585059895524-72359e06133a?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 20,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Pomegranate\",\n        description: \"Antioxidant-rich pomegranate with ruby red seeds\",\n        price: \"140.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1553575457-d5d18c4f0fb1?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 25,\n        categoryId: categoryMap.get(\"fruits\"),\n        isActive: true,\n      },\n\n      // Dairy\n      {\n        name: \"Fresh Milk\",\n        description: \"Pure and fresh milk from local dairy farms\",\n        price: \"55.00\",\n        weight: \"1 liter\",\n        unit: \"liter\",\n        imageUrl: \"https://images.unsplash.com/photo-1563636619-e9143da7973b?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 100,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Greek Yogurt\",\n        description: \"Creamy Greek yogurt rich in protein and probiotics\",\n        price: \"120.00\",\n        weight: \"500g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1571212515967-df95b33e1ea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 40,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Cheese\",\n        description: \"Premium quality fresh cheese for cooking and snacking\",\n        price: \"200.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1486297678162-eb2a19b0a32d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Butter\",\n        description: \"Creamy fresh butter made from pure milk cream\",\n        price: \"180.00\",\n        weight: \"200g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1589985270826-4b7bb135bc9d?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 50,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Cottage Cheese\",\n        description: \"Fresh cottage cheese high in protein and low in fat\",\n        price: \"160.00\",\n        weight: \"200g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1628088062854-d1870b4553da?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 35,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Fresh Cream\",\n        description: \"Rich and thick cream perfect for cooking and desserts\",\n        price: \"140.00\",\n        weight: \"200ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1563379091839-d5acc2ce0e84?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 25,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Mozzarella Cheese\",\n        description: \"Premium mozzarella cheese perfect for pizzas and pasta\",\n        price: \"250.00\",\n        weight: \"200g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1552767059-ce182ead6c1b?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 20,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Cheddar Cheese\",\n        description: \"Aged cheddar cheese with rich and sharp flavor\",\n        price: \"300.00\",\n        weight: \"200g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1452195100486-9cc805987862?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 15,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Flavored Yogurt\",\n        description: \"Delicious flavored yogurt available in multiple varieties\",\n        price: \"80.00\",\n        weight: \"400g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1571212515967-df95b33e1ea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 60,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n      {\n        name: \"Paneer\",\n        description: \"Fresh homemade paneer perfect for Indian cuisine\",\n        price: \"220.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1606491956689-2ea866880c84?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 40,\n        categoryId: categoryMap.get(\"dairy\"),\n        isActive: true,\n      },\n\n      // Snacks\n      {\n        name: \"Mixed Nuts\",\n        description: \"Premium mixed nuts perfect for healthy snacking\",\n        price: \"300.00\",\n        originalPrice: \"350.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1599490659213-e2b9527bd087?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 50,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Protein Bars\",\n        description: \"High protein energy bars for fitness enthusiasts\",\n        price: \"180.00\",\n        weight: \"6 pieces\",\n        unit: \"piece\",\n        imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 40,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Trail Mix\",\n        description: \"Healthy trail mix with nuts, dried fruits and seeds\",\n        price: \"250.00\",\n        weight: \"200g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1608897013039-887f21d8c804?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 35,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Granola Bars\",\n        description: \"Crunchy granola bars made with oats and honey\",\n        price: \"150.00\",\n        weight: \"6 pieces\",\n        unit: \"piece\",\n        imageUrl: \"https://images.unsplash.com/photo-1590736969955-71cc94901144?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 45,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Roasted Almonds\",\n        description: \"Lightly salted roasted almonds for healthy snacking\",\n        price: \"400.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1508747703725-719777637510?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Dried Fruits Mix\",\n        description: \"Assorted dried fruits rich in vitamins and minerals\",\n        price: \"320.00\",\n        weight: \"250g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1559827260-dc66d52bef19?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 25,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Whole Grain Crackers\",\n        description: \"Crispy whole grain crackers perfect with cheese\",\n        price: \"120.00\",\n        weight: \"200g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1509440159596-0249088772ff?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 40,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Popcorn\",\n        description: \"Light and airy popcorn seasoned with natural flavors\",\n        price: \"80.00\",\n        weight: \"100g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 60,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Rice Cakes\",\n        description: \"Light and crunchy rice cakes for guilt-free snacking\",\n        price: \"100.00\",\n        weight: \"150g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1585032226651-759b368d7246?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 35,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n      {\n        name: \"Veggie Chips\",\n        description: \"Crispy vegetable chips made from real vegetables\",\n        price: \"140.00\",\n        weight: \"100g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1587735243615-c03f25aaff15?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"snacks\"),\n        isActive: true,\n      },\n\n      // Beverages\n      {\n        name: \"Fresh Orange Juice\",\n        description: \"Freshly squeezed orange juice with no added sugar\",\n        price: \"120.00\",\n        weight: \"1 liter\",\n        unit: \"liter\",\n        imageUrl: \"https://images.unsplash.com/photo-1544145945-f90425340c7e?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 50,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Green Tea\",\n        description: \"Premium green tea leaves rich in antioxidants\",\n        price: \"200.00\",\n        weight: \"100g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1564890275445-64d6ac8c9a89?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Coconut Water\",\n        description: \"Natural coconut water packed with electrolytes\",\n        price: \"60.00\",\n        weight: \"500ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1605275400606-2d3c0516e3ac?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 40,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Cold Coffee\",\n        description: \"Refreshing cold coffee with rich coffee flavor\",\n        price: \"80.00\",\n        weight: \"300ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1461023058943-07fcbe16d735?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 45,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Herbal Tea\",\n        description: \"Soothing herbal tea blend for relaxation and wellness\",\n        price: \"180.00\",\n        weight: \"50g\",\n        unit: \"gram\",\n        imageUrl: \"https://images.unsplash.com/photo-1597318066986-3920d3ab6cb4?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 25,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Lemon Water\",\n        description: \"Refreshing lemon-infused water perfect for hydration\",\n        price: \"40.00\",\n        weight: \"500ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1571068316344-75bc76f77890?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 60,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Energy Drink\",\n        description: \"Natural energy drink with vitamins and minerals\",\n        price: \"100.00\",\n        weight: \"250ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1534353436294-0dbd4bdac845?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 35,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Smoothie Mix\",\n        description: \"Healthy smoothie mix with fruits and superfoods\",\n        price: \"160.00\",\n        weight: \"400ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1553530666-ba11a7da3888?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 20,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Sparkling Water\",\n        description: \"Refreshing sparkling water with natural bubbles\",\n        price: \"70.00\",\n        weight: \"750ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1558961363-fa8fdf82db35?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 50,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n      {\n        name: \"Fruit Punch\",\n        description: \"Mixed fruit punch with natural fruit flavors\",\n        price: \"90.00\",\n        weight: \"500ml\",\n        unit: \"ml\",\n        imageUrl: \"https://images.unsplash.com/photo-1556679343-c7306c1976bc?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\",\n        stock: 30,\n        categoryId: categoryMap.get(\"beverages\"),\n        isActive: true,\n      },\n    ];\n\n    console.log(\"Inserting products...\");\n    await db.insert(products).values(sampleProducts);\n\n    console.log(\"Database seeding completed successfully!\");\n    return {\n      categories: insertedCategories.length,\n      products: sampleProducts.length,\n    };\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seeding if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then((result) => {\n      console.log(`Seeded ${result.categories} categories and ${result.products} products`);\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"Seeding failed:\", error);\n      process.exit(1);\n    });\n}\n","size_bytes":23605},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  products,\n  cartItems,\n  orders,\n  orderItems,\n  coupons,\n  feedback,\n  type User,\n  type UpsertUser,\n  type Category,\n  type Product,\n  type CartItem,\n  type Order,\n  type OrderItem,\n  type Coupon,\n  type Feedback,\n  type InsertCategory,\n  type InsertProduct,\n  type InsertCartItem,\n  type InsertOrder,\n  type InsertOrderItem,\n  type InsertCoupon,\n  type InsertFeedback,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n\n  // Category operations\n  getCategories(): Promise<Category[]>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n\n  // Product operations\n  getProducts(): Promise<Product[]>;\n  getProductsByCategory(categoryId: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  searchProducts(query: string): Promise<Product[]>;\n\n  // Cart operations\n  getCartItems(userId: string): Promise<(CartItem & { product: Product })[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem>;\n  removeFromCart(id: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n\n  // Order operations\n  getOrders(userId?: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] })[]>;\n  getOrder(id: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] }) | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  createOrderItems(orderItems: InsertOrderItem[]): Promise<OrderItem[]>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n  updateOrderPaymentStatus(id: string, paymentStatus: string, paymentIntentId?: string): Promise<Order>;\n\n  // Coupon operations\n  getCoupons(): Promise<Coupon[]>;\n  getCouponByCode(code: string): Promise<Coupon | undefined>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon>;\n  useCoupon(code: string): Promise<Coupon>;\n\n  // Feedback operations\n  getFeedback(): Promise<(Feedback & { user: User; order?: Order })[]>;\n  createFeedback(feedback: InsertFeedback): Promise<Feedback>;\n\n  // Analytics\n  getDashboardStats(): Promise<{\n    totalOrders: number;\n    todayRevenue: number;\n    activeProducts: number;\n    activeUsers: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, true)).orderBy(asc(categories.name));\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(and(eq(categories.slug, slug), eq(categories.isActive, true)));\n    return category;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set({ ...category, updatedAt: new Date() })\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.update(categories).set({ isActive: false }).where(eq(categories.id, id));\n  }\n\n  // Product operations\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.isActive, true)).orderBy(desc(products.createdAt));\n  }\n\n  async getProductsByCategory(categoryId: string): Promise<Product[]> {\n    return await db.select().from(products).where(and(eq(products.categoryId, categoryId), eq(products.isActive, true)));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(and(eq(products.id, id), eq(products.isActive, true)));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        and(\n          eq(products.isActive, true),\n          sql`${products.name} ILIKE ${'%' + query + '%'}`\n        )\n      );\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<(CartItem & { product: Product })[]> {\n    return await db\n      .select()\n      .from(cartItems)\n      .innerJoin(products, eq(cartItems.productId, products.id))\n      .where(eq(cartItems.userId, userId))\n      .then((rows) =>\n        rows.map((row) => ({\n          ...row.cart_items,\n          product: row.products,\n        }))\n      );\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const [existingItem] = await db\n      .select()\n      .from(cartItems)\n      .where(and(eq(cartItems.userId, cartItem.userId), eq(cartItems.productId, cartItem.productId)));\n\n    if (existingItem) {\n      // Update quantity\n      const [updatedItem] = await db\n        .update(cartItems)\n        .set({ \n          quantity: existingItem.quantity + (cartItem.quantity || 1),\n          updatedAt: new Date()\n        })\n        .where(eq(cartItems.id, existingItem.id))\n        .returning();\n      return updatedItem;\n    } else {\n      // Add new item\n      const [newItem] = await db.insert(cartItems).values(cartItem).returning();\n      return newItem;\n    }\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem> {\n    const [updatedItem] = await db\n      .update(cartItems)\n      .set({ quantity, updatedAt: new Date() })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async removeFromCart(id: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.id, id));\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  // Order operations\n  async getOrders(userId?: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] })[]> {\n    const ordersQuery = userId \n      ? db.select().from(orders).where(eq(orders.userId, userId)).orderBy(desc(orders.createdAt))\n      : db.select().from(orders).orderBy(desc(orders.createdAt));\n\n    const ordersResult = await ordersQuery;\n\n    const ordersWithItems = await Promise.all(\n      ordersResult.map(async (order) => {\n        const items = await db\n          .select()\n          .from(orderItems)\n          .innerJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id))\n          .then((rows) =>\n            rows.map((row) => ({\n              ...row.order_items,\n              product: row.products,\n            }))\n          );\n\n        return {\n          ...order,\n          orderItems: items,\n        };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async getOrder(id: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] }) | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    if (!order) return undefined;\n\n    const items = await db\n      .select()\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, order.id))\n      .then((rows) =>\n        rows.map((row) => ({\n          ...row.order_items,\n          product: row.products,\n        }))\n      );\n\n    return {\n      ...order,\n      orderItems: items,\n    };\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async createOrderItems(orderItems: InsertOrderItem[]): Promise<OrderItem[]> {\n    const newOrderItems = await db.insert(orderItems).values(orderItems).returning();\n    return newOrderItems;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async updateOrderPaymentStatus(id: string, paymentStatus: string, paymentIntentId?: string): Promise<Order> {\n    const updateData: any = { paymentStatus: paymentStatus as any, updatedAt: new Date() };\n    if (paymentIntentId) {\n      updateData.stripePaymentIntentId = paymentIntentId;\n    }\n\n    const [updatedOrder] = await db\n      .update(orders)\n      .set(updateData)\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  // Coupon operations\n  async getCoupons(): Promise<Coupon[]> {\n    return await db.select().from(coupons).orderBy(desc(coupons.createdAt));\n  }\n\n  async getCouponByCode(code: string): Promise<Coupon | undefined> {\n    const [coupon] = await db.select().from(coupons).where(and(eq(coupons.code, code), eq(coupons.isActive, true)));\n    return coupon;\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const [newCoupon] = await db.insert(coupons).values(coupon).returning();\n    return newCoupon;\n  }\n\n  async updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon> {\n    const [updatedCoupon] = await db\n      .update(coupons)\n      .set({ ...coupon, updatedAt: new Date() })\n      .where(eq(coupons.id, id))\n      .returning();\n    return updatedCoupon;\n  }\n\n  async useCoupon(code: string): Promise<Coupon> {\n    const [updatedCoupon] = await db\n      .update(coupons)\n      .set({ \n        usageCount: sql`${coupons.usageCount} + 1`,\n        updatedAt: new Date() \n      })\n      .where(eq(coupons.code, code))\n      .returning();\n    return updatedCoupon;\n  }\n\n  // Feedback operations\n  async getFeedback(): Promise<(Feedback & { user: User; order?: Order })[]> {\n    return await db\n      .select()\n      .from(feedback)\n      .innerJoin(users, eq(feedback.userId, users.id))\n      .leftJoin(orders, eq(feedback.orderId, orders.id))\n      .orderBy(desc(feedback.createdAt))\n      .then((rows) =>\n        rows.map((row) => ({\n          ...row.feedback,\n          user: row.users,\n          order: row.orders || undefined,\n        }))\n      );\n  }\n\n  async createFeedback(feedbackData: InsertFeedback): Promise<Feedback> {\n    const [newFeedback] = await db.insert(feedback).values(feedbackData).returning();\n    return newFeedback;\n  }\n\n  // Analytics\n  async getDashboardStats(): Promise<{\n    totalOrders: number;\n    todayRevenue: number;\n    activeProducts: number;\n    activeUsers: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [totalOrdersResult] = await db\n      .select({ count: sql`count(*)`.mapWith(Number) })\n      .from(orders);\n\n    const [todayRevenueResult] = await db\n      .select({ \n        revenue: sql`COALESCE(SUM(CAST(${orders.totalAmount} AS DECIMAL)), 0)`.mapWith(Number) \n      })\n      .from(orders)\n      .where(sql`${orders.createdAt} >= ${today}`);\n\n    const [activeProductsResult] = await db\n      .select({ count: sql`count(*)`.mapWith(Number) })\n      .from(products)\n      .where(eq(products.isActive, true));\n\n    const [activeUsersResult] = await db\n      .select({ count: sql`count(*)`.mapWith(Number) })\n      .from(users);\n\n    return {\n      totalOrders: totalOrdersResult.count,\n      todayRevenue: todayRevenueResult.revenue,\n      activeProducts: activeProductsResult.count,\n      activeUsers: activeUsersResult.count,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13660},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  phone: varchar(\"phone\"),\n  role: varchar(\"role\").default(\"customer\"), // customer, admin\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product categories\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  slug: varchar(\"slug\", { length: 100 }).notNull().unique(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Products\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  weight: varchar(\"weight\", { length: 50 }),\n  unit: varchar(\"unit\", { length: 20 }).default(\"piece\"),\n  imageUrl: varchar(\"image_url\"),\n  stock: integer(\"stock\").default(0),\n  categoryId: varchar(\"category_id\").notNull().references(() => categories.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cart items\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order status enum\nexport const orderStatusEnum = pgEnum(\"order_status\", [\"pending\", \"processing\", \"delivered\", \"cancelled\"]);\nexport const deliveryTypeEnum = pgEnum(\"delivery_type\", [\"home\", \"pickup\"]);\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\"pending\", \"completed\", \"failed\"]);\n\n// Orders\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  orderNumber: varchar(\"order_number\", { length: 50 }).notNull().unique(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  deliveryFee: decimal(\"delivery_fee\", { precision: 10, scale: 2 }).default(\"0\"),\n  status: orderStatusEnum(\"status\").default(\"pending\"),\n  deliveryType: deliveryTypeEnum(\"delivery_type\").default(\"home\"),\n  paymentStatus: paymentStatusEnum(\"payment_status\").default(\"pending\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }),\n  deliveryAddress: text(\"delivery_address\"),\n  couponCode: varchar(\"coupon_code\", { length: 50 }),\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coupons\nexport const coupons = pgTable(\"coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\", { length: 50 }).notNull().unique(),\n  description: text(\"description\"),\n  discountType: varchar(\"discount_type\", { length: 20 }).default(\"percentage\"), // percentage, fixed\n  discountValue: decimal(\"discount_value\", { precision: 10, scale: 2 }).notNull(),\n  minOrderAmount: decimal(\"min_order_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  maxDiscountAmount: decimal(\"max_discount_amount\", { precision: 10, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  validFrom: timestamp(\"valid_from\").defaultNow(),\n  validUntil: timestamp(\"valid_until\"),\n  usageLimit: integer(\"usage_limit\"),\n  usageCount: integer(\"usage_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Feedback and ratings\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  cartItems: many(cartItems),\n  orders: many(orders),\n  feedback: many(feedback),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  cartItems: many(cartItems),\n  orderItems: many(orderItems),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n  feedback: many(feedback),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const feedbackRelations = relations(feedback, ({ one }) => ({\n  user: one(users, {\n    fields: [feedback.userId],\n    references: [users.id],\n  }),\n  order: one(orders, {\n    fields: [feedback.orderId],\n    references: [orders.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type Coupon = typeof coupons.$inferSelect;\nexport type Feedback = typeof feedback.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\n","size_bytes":9392},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Category from \"@/pages/category\";\nimport Checkout from \"@/pages/checkout\";\nimport Orders from \"@/pages/orders\";\nimport Admin from \"@/pages/admin\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/category/:slug\" component={Category} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/orders\" component={Orders} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1352},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(355.7, 100%, 97.3%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(222.2, 84%, 4.9%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.5rem;\n  \n  /* Custom colors matching the design */\n  --primary-50: hsl(138, 76%, 97%);\n  --primary-100: hsl(141, 84%, 93%);\n  --primary-200: hsl(141, 79%, 85%);\n  --primary-300: hsl(142, 77%, 73%);\n  --primary-400: hsl(142, 69%, 58%);\n  --primary-500: hsl(142, 76%, 36%);\n  --primary-600: hsl(142, 72%, 29%);\n  --primary-700: hsl(142, 64%, 24%);\n  --primary-800: hsl(142, 53%, 20%);\n  --primary-900: hsl(143, 61%, 20%);\n  \n  --secondary-50: hsl(33, 100%, 96%);\n  --secondary-100: hsl(34, 100%, 92%);\n  --secondary-200: hsl(32, 98%, 83%);\n  --secondary-300: hsl(31, 97%, 72%);\n  --secondary-400: hsl(27, 96%, 61%);\n  --secondary-500: hsl(25, 95%, 53%);\n  --secondary-600: hsl(21, 90%, 48%);\n  --secondary-700: hsl(17, 88%, 40%);\n  --secondary-800: hsl(15, 79%, 34%);\n  --secondary-900: hsl(15, 75%, 28%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(355.7, 100%, 97.3%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(212.7, 26.8%, 83.9%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fade-in 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.3s ease-out;\n  }\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n","size_bytes":3436},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CartSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { X, Plus, Minus, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface CartSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CartSidebar({ isOpen, onClose }: CartSidebarProps) {\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [appliedCoupon, setAppliedCoupon] = useState<any>(null);\n  const [discountAmount, setDiscountAmount] = useState(0);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n\n  // Fetch cart items\n  const { data: cartItems, isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n  });\n\n  // Update cart item quantity\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      const response = await apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove item from cart\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Item Removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Validate coupon\n  const validateCouponMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const subtotal = calculateSubtotal();\n      const response = await apiRequest(\"POST\", \"/api/coupons/validate\", {\n        code,\n        orderAmount: subtotal,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAppliedCoupon(data.coupon);\n      setDiscountAmount(data.discountAmount);\n      toast({\n        title: \"Coupon Applied!\",\n        description: `You saved ₹${data.discountAmount}`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Invalid Coupon\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuantity = (id: string, newQuantity: number) => {\n    if (newQuantity < 1) return;\n    updateQuantityMutation.mutate({ id, quantity: newQuantity });\n  };\n\n  const removeItem = (id: string) => {\n    removeItemMutation.mutate(id);\n  };\n\n  const applyCoupon = () => {\n    if (!couponCode.trim()) return;\n    validateCouponMutation.mutate(couponCode.trim());\n  };\n\n  const removeCoupon = () => {\n    setCouponCode(\"\");\n    setAppliedCoupon(null);\n    setDiscountAmount(0);\n  };\n\n  const calculateSubtotal = () => {\n    if (!cartItems) return 0;\n    return cartItems.reduce((total: number, item: any) => {\n      return total + (parseFloat(item.product.price) * item.quantity);\n    }, 0);\n  };\n\n  const subtotal = calculateSubtotal();\n  const total = subtotal - discountAmount;\n  const itemCount = cartItems ? cartItems.length : 0;\n\n  const handleCheckout = () => {\n    onClose();\n    navigate(\"/checkout\");\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent side=\"right\" className=\"w-full sm:w-96 p-0\">\n        <div className=\"h-full flex flex-col\">\n          {/* Header */}\n          <SheetHeader className=\"p-6 border-b\">\n            <div className=\"flex items-center justify-between\">\n              <SheetTitle className=\"flex items-center\">\n                <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                My Cart\n              </SheetTitle>\n              <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-cart\">\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <p className=\"text-sm text-gray-500 mt-1\" data-testid=\"text-cart-items-count\">\n              {itemCount} items\n            </p>\n          </SheetHeader>\n\n          {/* Cart Items */}\n          <ScrollArea className=\"flex-1\">\n            <div className=\"p-6\">\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"flex space-x-3\">\n                        <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : !cartItems || cartItems.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <ShoppingCart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                  <p className=\"text-gray-500 mb-4\">Your cart is empty</p>\n                  <Button onClick={onClose} data-testid=\"button-continue-shopping\">\n                    Continue Shopping\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {cartItems.map((item: any) => (\n                    <div key={item.id} className=\"flex items-center space-x-3 py-4 border-b last:border-b-0\">\n                      {/* Product Image */}\n                      <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center overflow-hidden flex-shrink-0\">\n                        {item.product.imageUrl ? (\n                          <img\n                            src={item.product.imageUrl}\n                            alt={item.product.name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <ShoppingCart className=\"h-6 w-6 text-gray-400\" />\n                        )}\n                      </div>\n\n                      {/* Product Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm text-gray-900 truncate\" data-testid={`text-cart-item-name-${item.id}`}>\n                          {item.product.name}\n                        </h4>\n                        <p className=\"text-sm text-gray-500\" data-testid={`text-cart-item-price-${item.id}`}>\n                          ₹{item.product.price}\n                        </p>\n\n                        {/* Quantity Controls */}\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                            disabled={item.quantity <= 1 || updateQuantityMutation.isPending}\n                            className=\"h-6 w-6 p-0\"\n                            data-testid={`button-decrease-cart-${item.id}`}\n                          >\n                            <Minus className=\"h-3 w-3\" />\n                          </Button>\n                          <span className=\"text-sm font-medium w-6 text-center\" data-testid={`text-cart-quantity-${item.id}`}>\n                            {item.quantity}\n                          </span>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                            disabled={updateQuantityMutation.isPending}\n                            className=\"h-6 w-6 p-0\"\n                            data-testid={`button-increase-cart-${item.id}`}\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeItem(item.id)}\n                            disabled={removeItemMutation.isPending}\n                            className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                            data-testid={`button-remove-cart-${item.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Item Total */}\n                      <div className=\"text-right flex-shrink-0\">\n                        <p className=\"font-semibold text-sm\" data-testid={`text-cart-item-total-${item.id}`}>\n                          ₹{(parseFloat(item.product.price) * item.quantity).toFixed(2)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Cart Footer */}\n          {cartItems && cartItems.length > 0 && (\n            <div className=\"p-6 border-t bg-gray-50\">\n              {/* Coupon Code */}\n              <div className=\"mb-4\">\n                {appliedCoupon ? (\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                    <div>\n                      <div className=\"font-medium text-green-800\">\n                        {appliedCoupon.code} Applied!\n                      </div>\n                      <div className=\"text-sm text-green-600\">\n                        You saved ₹{discountAmount}\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={removeCoupon}\n                      data-testid=\"button-remove-coupon\"\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Enter coupon code\"\n                      value={couponCode}\n                      onChange={(e) => setCouponCode(e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"input-coupon-cart\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      onClick={applyCoupon}\n                      disabled={validateCouponMutation.isPending || !couponCode.trim()}\n                      className=\"px-6\"\n                      data-testid=\"button-apply-coupon-cart\"\n                    >\n                      Apply\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {/* Order Summary */}\n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Subtotal</span>\n                  <span data-testid=\"text-cart-subtotal\">₹{subtotal.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Delivery Fee</span>\n                  <span className=\"text-green-600\" data-testid=\"text-cart-delivery\">FREE</span>\n                </div>\n                {discountAmount > 0 && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Discount</span>\n                    <span className=\"text-green-600\" data-testid=\"text-cart-discount\">-₹{discountAmount.toFixed(2)}</span>\n                  </div>\n                )}\n                <Separator />\n                <div className=\"flex justify-between font-semibold\">\n                  <span>Total</span>\n                  <span data-testid=\"text-cart-total\">₹{total.toFixed(2)}</span>\n                </div>\n              </div>\n\n              {/* Checkout Button */}\n              <Button\n                onClick={handleCheckout}\n                className=\"w-full bg-primary-500 hover:bg-primary-600 text-white py-3\"\n                data-testid=\"button-checkout\"\n              >\n                Proceed to Checkout\n              </Button>\n            </div>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":14189},"client/src/components/CheckoutModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Loader2, Home, Store, CreditCard, Smartphone, Banknote, X } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface CheckoutModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  cartItems: any[];\n  totalAmount: number;\n}\n\nexport default function CheckoutModal({\n  isOpen,\n  onClose,\n  cartItems,\n  totalAmount,\n}: CheckoutModalProps) {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [processing, setProcessing] = useState(false);\n  \n  // Form state\n  const [deliveryType, setDeliveryType] = useState(\"home\");\n  const [paymentMethod, setPaymentMethod] = useState(\"card\");\n  const [address, setAddress] = useState({\n    street: \"\",\n    city: \"\",\n    pinCode: \"\",\n  });\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [discountAmount, setDiscountAmount] = useState(0);\n  const [appliedCoupon, setAppliedCoupon] = useState<any>(null);\n\n  // Validate coupon mutation\n  const validateCouponMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", \"/api/coupons/validate\", {\n        code,\n        orderAmount: totalAmount,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setDiscountAmount(data.discountAmount);\n      setAppliedCoupon(data.coupon);\n      toast({\n        title: \"Coupon Applied!\",\n        description: `You saved ₹${data.discountAmount}`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Invalid Coupon\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      onClose();\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: \"Your order has been placed and will be delivered soon.\",\n      });\n      navigate(\"/orders\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const applyCoupon = () => {\n    if (!couponCode.trim()) return;\n    validateCouponMutation.mutate(couponCode.trim());\n  };\n\n  const removeCoupon = () => {\n    setCouponCode(\"\");\n    setDiscountAmount(0);\n    setAppliedCoupon(null);\n  };\n\n  const finalAmount = totalAmount - discountAmount;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setProcessing(true);\n\n    try {\n      // For this implementation, we'll handle Cash on Delivery\n      // In a real app, you'd integrate with payment gateway for card/UPI\n      const orderData = {\n        totalAmount: finalAmount,\n        discountAmount,\n        deliveryType,\n        paymentMethod,\n        deliveryAddress: deliveryType === \"home\" ? \n          `${address.street}, ${address.city}, ${address.pinCode}` : \n          null,\n        couponCode: appliedCoupon?.code || null,\n        paymentStatus: paymentMethod === \"cod\" ? \"pending\" : \"completed\",\n        items: cartItems.map(item => ({\n          productId: item.product.id,\n          quantity: item.quantity,\n          price: item.product.price,\n        })),\n      };\n\n      createOrderMutation.mutate(orderData);\n    } catch (error) {\n      console.error(\"Checkout error:\", error);\n      toast({\n        title: \"Checkout Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        {/* Modal Header */}\n        <DialogHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-xl font-semibold\">Checkout</DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-checkout\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        {/* Checkout Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Delivery Options */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-4 flex items-center\">\n                <Store className=\"h-5 w-5 mr-2\" />\n                Delivery Option\n              </h4>\n              <RadioGroup value={deliveryType} onValueChange={setDeliveryType}>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <label className=\"border rounded-lg p-4 cursor-pointer hover:border-primary-500 transition-colors\">\n                    <RadioGroupItem value=\"home\" className=\"sr-only\" />\n                    <div className=\"text-center\">\n                      <Home className=\"h-8 w-8 text-primary-500 mx-auto mb-2\" />\n                      <div className=\"font-medium\">Home Delivery</div>\n                      <div className=\"text-sm text-gray-500\">15-30 mins • FREE</div>\n                    </div>\n                  </label>\n                  <label className=\"border rounded-lg p-4 cursor-pointer hover:border-primary-500 transition-colors\">\n                    <RadioGroupItem value=\"pickup\" className=\"sr-only\" />\n                    <div className=\"text-center\">\n                      <Store className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                      <div className=\"font-medium\">Store Pickup</div>\n                      <div className=\"text-sm text-gray-500\">Ready in 10 mins</div>\n                    </div>\n                  </label>\n                </div>\n              </RadioGroup>\n            </CardContent>\n          </Card>\n\n          {/* Delivery Address */}\n          {deliveryType === \"home\" && (\n            <Card>\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-4\">Delivery Address</h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"street\">Street Address *</Label>\n                    <Textarea\n                      id=\"street\"\n                      placeholder=\"Enter your complete address\"\n                      value={address.street}\n                      onChange={(e) => setAddress({ ...address, street: e.target.value })}\n                      required\n                      data-testid=\"input-street-checkout\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"city\">City *</Label>\n                      <Input\n                        id=\"city\"\n                        placeholder=\"City\"\n                        value={address.city}\n                        onChange={(e) => setAddress({ ...address, city: e.target.value })}\n                        required\n                        data-testid=\"input-city-checkout\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"pinCode\">PIN Code *</Label>\n                      <Input\n                        id=\"pinCode\"\n                        placeholder=\"PIN Code\"\n                        value={address.pinCode}\n                        onChange={(e) => setAddress({ ...address, pinCode: e.target.value })}\n                        required\n                        data-testid=\"input-pincode-checkout\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Payment Method */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-4 flex items-center\">\n                <CreditCard className=\"h-5 w-5 mr-2\" />\n                Payment Method\n              </h4>\n              <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>\n                <div className=\"space-y-3\">\n                  <label className=\"flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:border-primary-500\">\n                    <RadioGroupItem value=\"card\" />\n                    <CreditCard className=\"h-5 w-5 text-gray-600\" />\n                    <span>Credit/Debit Card</span>\n                  </label>\n                  <label className=\"flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:border-primary-500\">\n                    <RadioGroupItem value=\"upi\" />\n                    <Smartphone className=\"h-5 w-5 text-gray-600\" />\n                    <span>UPI Payment</span>\n                  </label>\n                  <label className=\"flex items-center space-x-3 p-3 border rounded-lg cursor-pointer hover:border-primary-500\">\n                    <RadioGroupItem value=\"cod\" />\n                    <Banknote className=\"h-5 w-5 text-gray-600\" />\n                    <span>Cash on Delivery</span>\n                  </label>\n                </div>\n              </RadioGroup>\n            </CardContent>\n          </Card>\n\n          {/* Coupon Code */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-4\">Apply Coupon</h4>\n              {appliedCoupon ? (\n                <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-green-800\">\n                      {appliedCoupon.code} Applied!\n                    </div>\n                    <div className=\"text-sm text-green-600\">\n                      You saved ₹{discountAmount}\n                    </div>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={removeCoupon}\n                    data-testid=\"button-remove-coupon-checkout\"\n                  >\n                    Remove\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"Enter coupon code\"\n                    value={couponCode}\n                    onChange={(e) => setCouponCode(e.target.value)}\n                    data-testid=\"input-coupon-checkout\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={applyCoupon}\n                    disabled={validateCouponMutation.isPending || !couponCode.trim()}\n                    data-testid=\"button-apply-coupon-checkout\"\n                  >\n                    {validateCouponMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      \"Apply\"\n                    )}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Order Summary */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-3\">Order Summary</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal ({cartItems.length} items)</span>\n                  <span data-testid=\"text-subtotal-checkout\">₹{totalAmount.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Delivery Charges</span>\n                  <span className=\"text-green-600\" data-testid=\"text-delivery-checkout\">FREE</span>\n                </div>\n                {discountAmount > 0 && (\n                  <div className=\"flex justify-between\">\n                    <span>Discount</span>\n                    <span className=\"text-green-600\" data-testid=\"text-discount-checkout\">-₹{discountAmount.toFixed(2)}</span>\n                  </div>\n                )}\n                <Separator />\n                <div className=\"flex justify-between font-semibold text-base\">\n                  <span>Total Amount</span>\n                  <span data-testid=\"text-total-checkout\">₹{finalAmount.toFixed(2)}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Place Order Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary-500 hover:bg-primary-600 text-white py-3 text-lg\"\n            disabled={processing || createOrderMutation.isPending}\n            data-testid=\"button-place-order-checkout\"\n          >\n            {processing || createOrderMutation.isPending ? (\n              <Loader2 className=\"h-5 w-5 animate-spin mr-2\" />\n            ) : null}\n            Place Order - ₹{finalAmount.toFixed(2)}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14614},"client/src/components/Footer.tsx":{"content":"import { ShoppingBasket, Facebook, Twitter, Instagram } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div>\n            <div className=\"flex items-center mb-4\">\n              <ShoppingBasket className=\"h-6 w-6 mr-2\" />\n              <h3 className=\"text-xl font-bold\">FreshMart</h3>\n            </div>\n            <p className=\"text-gray-400 mb-4\">\n              Fresh groceries delivered to your doorstep in 15 minutes\n            </p>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-white transition-colors\"\n                data-testid=\"link-facebook\"\n              >\n                <Facebook className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-white transition-colors\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-white transition-colors\"\n                data-testid=\"link-instagram\"\n              >\n                <Instagram className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Categories */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">Categories</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <Link href=\"/category/vegetables\">\n                  <a className=\"hover:text-white transition-colors\">Vegetables</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/category/fruits\">\n                  <a className=\"hover:text-white transition-colors\">Fruits</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/category/dairy\">\n                  <a className=\"hover:text-white transition-colors\">Dairy</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/category/snacks\">\n                  <a className=\"hover:text-white transition-colors\">Snacks</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/category/beverages\">\n                  <a className=\"hover:text-white transition-colors\">Beverages</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  About Us\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  Contact\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  Privacy Policy\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  Terms of Service\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\">\n                  FAQ\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          {/* Download App */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">Download App</h4>\n            <div className=\"space-y-3\">\n              <a\n                href=\"#\"\n                className=\"block bg-gray-800 hover:bg-gray-700 transition-colors rounded-lg p-3\"\n                data-testid=\"link-play-store\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-white rounded flex items-center justify-center\">\n                    <span className=\"text-xs font-bold text-gray-900\">GP</span>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-400\">Get it on</div>\n                    <div className=\"text-sm font-semibold\">Google Play</div>\n                  </div>\n                </div>\n              </a>\n              <a\n                href=\"#\"\n                className=\"block bg-gray-800 hover:bg-gray-700 transition-colors rounded-lg p-3\"\n                data-testid=\"link-app-store\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-white rounded flex items-center justify-center\">\n                    <span className=\"text-xs font-bold text-gray-900\">AS</span>\n                  </div>\n                  <div>\n                    <div className=\"text-xs text-gray-400\">Download on the</div>\n                    <div className=\"text-sm font-semibold\">App Store</div>\n                  </div>\n                </div>\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n          <p>&copy; 2024 FreshMart. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5517},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCart } from \"@/hooks/useCart\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  ShoppingBasket,\n  Search,\n  MapPin,\n  ShoppingCart,\n  User,\n  Package,\n  Settings,\n  LogOut,\n  Menu,\n} from \"lucide-react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\nexport default function Header() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { user, isAuthenticated } = useAuth();\n  const { openCart } = useCart();\n  const [location] = useLocation();\n\n  // Fetch cart items count\n  const { data: cartItems } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const cartItemsCount = cartItems ? cartItems.length : 0;\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      // Implement search functionality\n      console.log(\"Searching for:\", searchQuery);\n    }\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const isAdmin = user?.role === 'admin';\n\n  return (\n    <header className=\"bg-white shadow-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex-shrink-0\">\n              <div className=\"flex items-center\">\n                <ShoppingBasket className=\"h-8 w-8 text-primary-600 mr-3\" />\n                <h1 className=\"text-2xl font-bold text-primary-600\">FreshMart</h1>\n              </div>\n            </Link>\n          </div>\n\n          {/* Search Bar - Desktop */}\n          <div className=\"hidden md:flex flex-1 max-w-lg mx-8\">\n            <form onSubmit={handleSearch} className=\"relative w-full\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search for vegetables, fruits, dairy...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                data-testid=\"input-search\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            </form>\n          </div>\n\n          {/* User Actions - Desktop */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {/* Location */}\n            <Button variant=\"ghost\" className=\"flex items-center text-gray-700 hover:text-primary-600\">\n              <MapPin className=\"h-4 w-4 mr-1\" />\n              <span className=\"hidden sm:block\">Delhi</span>\n            </Button>\n\n            {/* Cart */}\n            <Button\n              variant=\"ghost\"\n              onClick={openCart}\n              className=\"relative p-2 text-gray-700 hover:text-primary-600\"\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"h-5 w-5\" />\n              {cartItemsCount > 0 && (\n                <Badge className=\"absolute -top-1 -right-1 bg-secondary-500 text-white text-xs h-5 w-5 flex items-center justify-center rounded-full\">\n                  {cartItemsCount}\n                </Badge>\n              )}\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"flex items-center text-gray-700 hover:text-primary-600\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <User className=\"h-5 w-5 mr-1\" />\n                  <span className=\"hidden sm:block\">\n                    {user?.firstName || user?.email?.split('@')[0] || 'Account'}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/orders\" className=\"flex items-center\">\n                    <Package className=\"h-4 w-4 mr-2\" />\n                    My Orders\n                  </Link>\n                </DropdownMenuItem>\n                {isAdmin && (\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/admin\" className=\"flex items-center\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Admin Dashboard\n                    </Link>\n                  </DropdownMenuItem>\n                )}\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Sign Out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-80\">\n                <div className=\"flex flex-col space-y-6\">\n                  {/* Mobile Search */}\n                  <form onSubmit={handleSearch} className=\"relative\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search products...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-mobile\"\n                    />\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  </form>\n\n                  {/* Cart */}\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      openCart();\n                      setMobileMenuOpen(false);\n                    }}\n                    className=\"justify-start\"\n                    data-testid=\"button-cart-mobile\"\n                  >\n                    <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                    Cart ({cartItemsCount})\n                  </Button>\n\n                  {/* Navigation Links */}\n                  <div className=\"space-y-2\">\n                    <Link href=\"/orders\">\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start\"\n                        onClick={() => setMobileMenuOpen(false)}\n                      >\n                        <Package className=\"h-4 w-4 mr-2\" />\n                        My Orders\n                      </Button>\n                    </Link>\n\n                    {isAdmin && (\n                      <Link href=\"/admin\">\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full justify-start\"\n                          onClick={() => setMobileMenuOpen(false)}\n                        >\n                          <Settings className=\"h-4 w-4 mr-2\" />\n                          Admin Dashboard\n                        </Button>\n                      </Link>\n                    )}\n\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      onClick={handleLogout}\n                      data-testid=\"button-logout-mobile\"\n                    >\n                      <LogOut className=\"h-4 w-4 mr-2\" />\n                      Sign Out\n                    </Button>\n                  </div>\n\n                  {/* User Info */}\n                  <div className=\"pt-6 border-t\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center\">\n                        <User className=\"h-5 w-5 text-primary-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">\n                          {user?.firstName || user?.email?.split('@')[0] || 'User'}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">{user?.email}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":9200},"client/src/components/ProductCard.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShoppingCart, Plus, Minus, Check } from \"lucide-react\";\n\ninterface ProductCardProps {\n  product: {\n    id: string;\n    name: string;\n    description?: string;\n    price: string;\n    originalPrice?: string;\n    weight?: string;\n    unit?: string;\n    imageUrl?: string;\n    stock?: number;\n  };\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const [quantity, setQuantity] = useState(1);\n  const [addedToCart, setAddedToCart] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/cart\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      setAddedToCart(true);\n      toast({\n        title: \"Added to Cart\",\n        description: `${product.name} has been added to your cart.`,\n      });\n      \n      // Reset the added state after 2 seconds\n      setTimeout(() => {\n        setAddedToCart(false);\n      }, 2000);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = () => {\n    addToCartMutation.mutate({\n      productId: product.id,\n      quantity,\n    });\n  };\n\n  const increaseQuantity = () => {\n    if (product.stock && quantity >= product.stock) return;\n    setQuantity(prev => prev + 1);\n  };\n\n  const decreaseQuantity = () => {\n    if (quantity > 1) {\n      setQuantity(prev => prev - 1);\n    }\n  };\n\n  const price = parseFloat(product.price);\n  const originalPrice = product.originalPrice ? parseFloat(product.originalPrice) : null;\n  const discountPercentage = originalPrice ? Math.round(((originalPrice - price) / originalPrice) * 100) : null;\n\n  return (\n    <Card \n      className=\"group hover:shadow-lg transition-all duration-200 border hover:border-primary-200 overflow-hidden animate-fade-in\"\n      data-testid={`card-product-${product.id}`}\n    >\n      <div className=\"relative\">\n        {/* Product Image */}\n        <div className=\"aspect-square w-full bg-gray-100 flex items-center justify-center overflow-hidden\">\n          {product.imageUrl ? (\n            <img\n              src={product.imageUrl}\n              alt={product.name}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n            />\n          ) : (\n            <ShoppingCart className=\"h-16 w-16 text-gray-300\" />\n          )}\n        </div>\n\n        {/* Discount Badge */}\n        {discountPercentage && discountPercentage > 0 && (\n          <Badge className=\"absolute top-2 right-2 bg-green-500 text-white\">\n            {discountPercentage}% OFF\n          </Badge>\n        )}\n\n        {/* Stock Badge */}\n        {product.stock !== undefined && product.stock <= 10 && product.stock > 0 && (\n          <Badge className=\"absolute top-2 left-2 bg-orange-500 text-white\">\n            Only {product.stock} left\n          </Badge>\n        )}\n\n        {product.stock === 0 && (\n          <Badge className=\"absolute top-2 left-2 bg-red-500 text-white\">\n            Out of Stock\n          </Badge>\n        )}\n      </div>\n\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-2\">\n          {/* Product Name */}\n          <h4 className=\"font-semibold text-gray-900 line-clamp-2\" data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h4>\n\n          {/* Weight/Unit */}\n          {product.weight && (\n            <p className=\"text-sm text-gray-500\" data-testid={`text-product-weight-${product.id}`}>\n              {product.weight}\n            </p>\n          )}\n\n          {/* Price */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-lg font-bold text-gray-900\" data-testid={`text-product-price-${product.id}`}>\n                ₹{price}\n              </span>\n              {originalPrice && originalPrice > price && (\n                <span className=\"text-sm text-gray-500 line-through\" data-testid={`text-product-original-price-${product.id}`}>\n                  ₹{originalPrice}\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Quantity Selector & Add to Cart */}\n          <div className=\"flex items-center justify-between pt-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={decreaseQuantity}\n                disabled={quantity <= 1}\n                className=\"h-8 w-8 p-0\"\n                data-testid={`button-decrease-${product.id}`}\n              >\n                <Minus className=\"h-3 w-3\" />\n              </Button>\n              <span className=\"text-sm font-medium w-8 text-center\" data-testid={`text-quantity-${product.id}`}>\n                {quantity}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={increaseQuantity}\n                disabled={product.stock ? quantity >= product.stock : false}\n                className=\"h-8 w-8 p-0\"\n                data-testid={`button-increase-${product.id}`}\n              >\n                <Plus className=\"h-3 w-3\" />\n              </Button>\n            </div>\n\n            <Button\n              onClick={handleAddToCart}\n              disabled={addToCartMutation.isPending || product.stock === 0 || addedToCart}\n              className={`text-sm px-4 py-2 transition-colors ${\n                addedToCart \n                  ? 'bg-green-500 hover:bg-green-600' \n                  : 'bg-primary-500 hover:bg-primary-600'\n              }`}\n              data-testid={`button-add-to-cart-${product.id}`}\n            >\n              {addedToCart ? (\n                <>\n                  <Check className=\"h-4 w-4 mr-1\" />\n                  Added\n                </>\n              ) : (\n                <>\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7102},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useCart.ts":{"content":"import { useState, createContext, useContext, ReactNode } from \"react\";\n\ninterface CartContextType {\n  isCartOpen: boolean;\n  openCart: () => void;\n  closeCart: () => void;\n  toggleCart: () => void;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: ReactNode }) {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  const openCart = () => setIsCartOpen(true);\n  const closeCart = () => setIsCartOpen(false);\n  const toggleCart = () => setIsCartOpen(!isCartOpen);\n\n  return (\n    <CartContext.Provider value={{ isCartOpen, openCart, closeCart, toggleCart }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n","size_bytes":894},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  ShoppingBag,\n  DollarSign,\n  Package,\n  Users,\n  Settings,\n  Plus,\n  Edit,\n  Star,\n  Calendar,\n  TrendingUp,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useLocation } from \"wouter\";\n\nconst OrderStatusBadge = ({ status }: { status: string }) => {\n  const colors = {\n    pending: \"bg-yellow-100 text-yellow-800\",\n    processing: \"bg-blue-100 text-blue-800\",\n    delivered: \"bg-green-100 text-green-800\",\n    cancelled: \"bg-red-100 text-red-800\",\n  } as const;\n\n  return (\n    <Badge className={colors[status as keyof typeof colors] || colors.pending}>\n      {status}\n    </Badge>\n  );\n};\n\nconst ProductForm = ({ product, onClose }: { product?: any; onClose: () => void }) => {\n  const [formData, setFormData] = useState({\n    name: product?.name || \"\",\n    description: product?.description || \"\",\n    price: product?.price || \"\",\n    originalPrice: product?.originalPrice || \"\",\n    weight: product?.weight || \"\",\n    unit: product?.unit || \"piece\",\n    stock: product?.stock || 0,\n    categoryId: product?.categoryId || \"\",\n    isActive: product?.isActive ?? true,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch categories for dropdown\n  const { data: categories } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"PUT\", `/api/products/${product.id}`, productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update product. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const productData = {\n      ...formData,\n      price: parseFloat(formData.price),\n      originalPrice: formData.originalPrice ? parseFloat(formData.originalPrice) : null,\n      stock: parseInt(formData.stock.toString()),\n    };\n\n    if (product) {\n      updateProductMutation.mutate(productData);\n    } else {\n      createProductMutation.mutate(productData);\n    }\n  };\n\n  return (\n    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n      <DialogHeader>\n        <DialogTitle>{product ? 'Edit Product' : 'Add New Product'}</DialogTitle>\n      </DialogHeader>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"name\">Product Name *</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              required\n              data-testid=\"input-product-name\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"category\">Category *</Label>\n            <Select\n              value={formData.categoryId}\n              onValueChange={(value) => setFormData({ ...formData, categoryId: value })}\n            >\n              <SelectTrigger data-testid=\"select-product-category\">\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories?.map((category: any) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            data-testid=\"textarea-product-description\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div>\n            <Label htmlFor=\"price\">Price (₹) *</Label>\n            <Input\n              id=\"price\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.price}\n              onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n              required\n              data-testid=\"input-product-price\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"originalPrice\">Original Price (₹)</Label>\n            <Input\n              id=\"originalPrice\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.originalPrice}\n              onChange={(e) => setFormData({ ...formData, originalPrice: e.target.value })}\n              data-testid=\"input-product-original-price\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"stock\">Stock *</Label>\n            <Input\n              id=\"stock\"\n              type=\"number\"\n              value={formData.stock}\n              onChange={(e) => setFormData({ ...formData, stock: parseInt(e.target.value) || 0 })}\n              required\n              data-testid=\"input-product-stock\"\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"weight\">Weight/Quantity</Label>\n            <Input\n              id=\"weight\"\n              value={formData.weight}\n              onChange={(e) => setFormData({ ...formData, weight: e.target.value })}\n              placeholder=\"e.g., 1 kg, 500g, 1 liter\"\n              data-testid=\"input-product-weight\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"unit\">Unit</Label>\n            <Select\n              value={formData.unit}\n              onValueChange={(value) => setFormData({ ...formData, unit: value })}\n            >\n              <SelectTrigger data-testid=\"select-product-unit\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"piece\">Piece</SelectItem>\n                <SelectItem value=\"kg\">Kilogram</SelectItem>\n                <SelectItem value=\"gram\">Gram</SelectItem>\n                <SelectItem value=\"liter\">Liter</SelectItem>\n                <SelectItem value=\"ml\">Milliliter</SelectItem>\n                <SelectItem value=\"dozen\">Dozen</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"active\"\n            checked={formData.isActive}\n            onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n            data-testid=\"switch-product-active\"\n          />\n          <Label htmlFor=\"active\">Active</Label>\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={createProductMutation.isPending || updateProductMutation.isPending}\n            data-testid=\"button-save-product\"\n          >\n            {product ? 'Update' : 'Create'} Product\n          </Button>\n        </div>\n      </form>\n    </DialogContent>\n  );\n};\n\nexport default function Admin() {\n  const [selectedTab, setSelectedTab] = useState(\"dashboard\");\n  const [productFormOpen, setProductFormOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const queryClient = useQueryClient();\n\n  // Check admin access\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || user?.role !== 'admin')) {\n      toast({\n        title: \"Access Denied\",\n        description: \"You need admin privileges to access this page.\",\n        variant: \"destructive\",\n      });\n      navigate(\"/\");\n      return;\n    }\n  }, [authLoading, isAuthenticated, user, toast, navigate]);\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: statsLoading, error: statsError } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Fetch orders\n  const { data: orders, isLoading: ordersLoading, error: ordersError } = useQuery({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Fetch products\n  const { data: products, isLoading: productsLoading, error: productsError } = useQuery({\n    queryKey: [\"/api/products\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Fetch feedback\n  const { data: feedback, isLoading: feedbackLoading, error: feedbackError } = useQuery({\n    queryKey: [\"/api/feedback\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n    retry: false,\n  });\n\n  // Update order status\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/orders/${orderId}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Success\",\n        description: \"Order status updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateOrderStatus = (orderId: string, newStatus: string) => {\n    updateOrderStatusMutation.mutate({ orderId, status: newStatus });\n  };\n\n  const openProductForm = (product?: any) => {\n    setSelectedProduct(product);\n    setProductFormOpen(true);\n  };\n\n  const closeProductForm = () => {\n    setSelectedProduct(null);\n    setProductFormOpen(false);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return null; // This will be handled by the useEffect redirect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n            <Settings className=\"h-8 w-8 mr-3 text-primary-600\" />\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-600\">Manage your store and monitor performance</p>\n        </div>\n\n        <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products</TabsTrigger>\n            <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders</TabsTrigger>\n            <TabsTrigger value=\"feedback\" data-testid=\"tab-feedback\">Feedback</TabsTrigger>\n          </TabsList>\n\n          {/* Dashboard Tab */}\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {statsLoading ? (\n                [...Array(4)].map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <Skeleton className=\"h-8 w-full mb-2\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                    </CardContent>\n                  </Card>\n                ))\n              ) : stats ? (\n                <>\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Total Orders</p>\n                          <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-orders\">\n                            {stats.totalOrders}\n                          </p>\n                        </div>\n                        <div className=\"p-3 bg-primary-100 rounded-lg\">\n                          <ShoppingBag className=\"h-6 w-6 text-primary-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Revenue Today</p>\n                          <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-today-revenue\">\n                            ₹{stats.todayRevenue}\n                          </p>\n                        </div>\n                        <div className=\"p-3 bg-green-100 rounded-lg\">\n                          <DollarSign className=\"h-6 w-6 text-green-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Active Products</p>\n                          <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-active-products\">\n                            {stats.activeProducts}\n                          </p>\n                        </div>\n                        <div className=\"p-3 bg-blue-100 rounded-lg\">\n                          <Package className=\"h-6 w-6 text-blue-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Active Users</p>\n                          <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-active-users\">\n                            {stats.activeUsers}\n                          </p>\n                        </div>\n                        <div className=\"p-3 bg-orange-100 rounded-lg\">\n                          <Users className=\"h-6 w-6 text-orange-600\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </>\n              ) : (\n                <div className=\"col-span-4 text-center py-8\">\n                  <p className=\"text-gray-500\">Failed to load dashboard stats</p>\n                </div>\n              )}\n            </div>\n\n            {/* Recent Orders */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {ordersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4\">\n                        <Skeleton className=\"h-4 w-20\" />\n                        <Skeleton className=\"h-4 w-32\" />\n                        <Skeleton className=\"h-4 w-24\" />\n                        <Skeleton className=\"h-6 w-16\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : orders && orders.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Order #</TableHead>\n                        <TableHead>Customer</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Date</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {orders.slice(0, 5).map((order: any) => (\n                        <TableRow key={order.id}>\n                          <TableCell className=\"font-medium\" data-testid={`order-number-${order.orderNumber}`}>\n                            #{order.orderNumber}\n                          </TableCell>\n                          <TableCell>\n                            {order.user?.firstName || order.user?.email?.split('@')[0] || 'Customer'}\n                          </TableCell>\n                          <TableCell>₹{order.totalAmount}</TableCell>\n                          <TableCell>\n                            <OrderStatusBadge status={order.status} />\n                          </TableCell>\n                          <TableCell>\n                            {format(new Date(order.createdAt), 'MMM dd, yyyy')}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500\">No orders found</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Products Tab */}\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Products Management</h2>\n              <Dialog open={productFormOpen} onOpenChange={setProductFormOpen}>\n                <DialogTrigger asChild>\n                  <Button onClick={() => openProductForm()} data-testid=\"button-add-product\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Product\n                  </Button>\n                </DialogTrigger>\n                <ProductForm product={selectedProduct} onClose={closeProductForm} />\n              </Dialog>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-0\">\n                {productsLoading ? (\n                  <div className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      {[...Array(10)].map((_, i) => (\n                        <div key={i} className=\"flex items-center space-x-4\">\n                          <Skeleton className=\"h-4 w-32\" />\n                          <Skeleton className=\"h-4 w-24\" />\n                          <Skeleton className=\"h-4 w-16\" />\n                          <Skeleton className=\"h-4 w-20\" />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : products && products.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Price</TableHead>\n                        <TableHead>Stock</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {products.map((product: any) => (\n                        <TableRow key={product.id}>\n                          <TableCell className=\"font-medium\" data-testid={`product-name-${product.id}`}>\n                            {product.name}\n                          </TableCell>\n                          <TableCell>₹{product.price}</TableCell>\n                          <TableCell>\n                            <Badge variant={product.stock > 10 ? \"default\" : product.stock > 0 ? \"secondary\" : \"destructive\"}>\n                              {product.stock} in stock\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={product.isActive ? \"default\" : \"secondary\"}>\n                              {product.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => openProductForm(product)}\n                              data-testid={`button-edit-product-${product.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500\">No products found</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <h2 className=\"text-xl font-semibold\">Orders Management</h2>\n            \n            <Card>\n              <CardContent className=\"p-0\">\n                {ordersLoading ? (\n                  <div className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      {[...Array(10)].map((_, i) => (\n                        <div key={i} className=\"flex items-center space-x-4\">\n                          <Skeleton className=\"h-4 w-20\" />\n                          <Skeleton className=\"h-4 w-32\" />\n                          <Skeleton className=\"h-4 w-24\" />\n                          <Skeleton className=\"h-6 w-16\" />\n                          <Skeleton className=\"h-4 w-24\" />\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : orders && orders.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Order #</TableHead>\n                        <TableHead>Customer</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Payment</TableHead>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {orders.map((order: any) => (\n                        <TableRow key={order.id}>\n                          <TableCell className=\"font-medium\">#{order.orderNumber}</TableCell>\n                          <TableCell>\n                            {order.user?.firstName || order.user?.email?.split('@')[0] || 'Customer'}\n                          </TableCell>\n                          <TableCell>₹{order.totalAmount}</TableCell>\n                          <TableCell>\n                            <OrderStatusBadge status={order.status} />\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={order.paymentStatus === 'completed' ? 'default' : 'secondary'}>\n                              {order.paymentStatus}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {format(new Date(order.createdAt), 'MMM dd, yyyy')}\n                          </TableCell>\n                          <TableCell>\n                            <Select\n                              value={order.status}\n                              onValueChange={(newStatus) => handleUpdateOrderStatus(order.id, newStatus)}\n                            >\n                              <SelectTrigger className=\"w-32\" data-testid={`select-order-status-${order.orderNumber}`}>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"pending\">Pending</SelectItem>\n                                <SelectItem value=\"processing\">Processing</SelectItem>\n                                <SelectItem value=\"delivered\">Delivered</SelectItem>\n                                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500\">No orders found</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Feedback Tab */}\n          <TabsContent value=\"feedback\" className=\"space-y-6\">\n            <h2 className=\"text-xl font-semibold\">Customer Feedback</h2>\n            \n            <div className=\"grid gap-4\">\n              {feedbackLoading ? (\n                [...Array(5)].map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Skeleton className=\"h-4 w-32\" />\n                          <Skeleton className=\"h-4 w-20\" />\n                        </div>\n                        <Skeleton className=\"h-16 w-full\" />\n                        <Skeleton className=\"h-4 w-24\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : feedback && feedback.length > 0 ? (\n                feedback.map((item: any) => (\n                  <Card key={item.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium\">\n                              {item.user?.firstName || item.user?.email?.split('@')[0] || 'Customer'}\n                            </span>\n                            <div className=\"flex items-center space-x-1\">\n                              {[...Array(5)].map((_, i) => (\n                                <Star\n                                  key={i}\n                                  className={`h-4 w-4 ${\n                                    i < item.rating ? 'text-yellow-400 fill-current' : 'text-gray-300'\n                                  }`}\n                                />\n                              ))}\n                            </div>\n                            <span className=\"text-sm text-gray-500\" data-testid={`feedback-rating-${item.id}`}>\n                              ({item.rating}/5)\n                            </span>\n                          </div>\n                          {item.comment && (\n                            <p className=\"text-gray-600\" data-testid={`feedback-comment-${item.id}`}>\n                              {item.comment}\n                            </p>\n                          )}\n                          <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                            <span className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-1\" />\n                              {format(new Date(item.createdAt), 'MMM dd, yyyy')}\n                            </span>\n                            {item.order && (\n                              <span>Order #{item.order.orderNumber}</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <Card>\n                  <CardContent className=\"p-8 text-center\">\n                    <p className=\"text-gray-500\">No feedback received yet</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":31304},"client/src/pages/category.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/Header\";\nimport ProductCard from \"@/components/ProductCard\";\nimport CartSidebar from \"@/components/CartSidebar\";\nimport Footer from \"@/components/Footer\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card } from \"@/components/ui/card\";\nimport { ShoppingBasket, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function Category() {\n  const [, params] = useRoute(\"/category/:slug\");\n  const { toast } = useToast();\n\n  // Fetch category\n  const { data: category, isLoading: categoryLoading, error: categoryError } = useQuery({\n    queryKey: [\"/api/categories\", params!.slug],\n    retry: false,\n  });\n\n  // Fetch products by category\n  const { data: products, isLoading: productsLoading, error: productsError } = useQuery({\n    queryKey: [\"/api/products\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/products?category=${params!.slug}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (categoryError && isUnauthorizedError(categoryError)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (productsError && isUnauthorizedError(productsError)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [categoryError, productsError, toast]);\n\n  if (categoryError && !isUnauthorizedError(categoryError)) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <ShoppingBasket className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Category Not Found</h2>\n            <p className=\"text-gray-500 mb-8\">The category you're looking for doesn't exist.</p>\n            <Link href=\"/\">\n              <Button>Go Back Home</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back Button */}\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        {/* Category Header */}\n        {categoryLoading ? (\n          <div className=\"mb-8\">\n            <Skeleton className=\"h-8 w-64 mb-2\" />\n            <Skeleton className=\"h-4 w-96\" />\n          </div>\n        ) : category ? (\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid={`text-category-name`}>\n              {category.name}\n            </h1>\n            {category.description && (\n              <p className=\"text-gray-600\" data-testid=\"text-category-description\">\n                {category.description}\n              </p>\n            )}\n          </div>\n        ) : null}\n\n        {/* Products Grid */}\n        {productsLoading ? (\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n            {[...Array(20)].map((_, i) => (\n              <Card key={i} className=\"p-4\">\n                <Skeleton className=\"w-full h-32 rounded-lg mb-3\" />\n                <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                <Skeleton className=\"h-3 w-1/2 mb-4\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </Card>\n            ))}\n          </div>\n        ) : products && products.length > 0 ? (\n          <div>\n            <div className=\"flex items-center justify-between mb-6\">\n              <p className=\"text-gray-600\" data-testid=\"text-products-count\">\n                {products.length} products found\n              </p>\n            </div>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n              {products.map((product: any) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <ShoppingBasket className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Products Found</h3>\n            <p className=\"text-gray-500 mb-8\">\n              We couldn't find any products in this category. Check back soon!\n            </p>\n            <Link href=\"/\">\n              <Button>Continue Shopping</Button>\n            </Link>\n          </div>\n        )}\n      </div>\n\n      <CartSidebar />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5577},"client/src/pages/checkout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2, Home, Store, CreditCard, Smartphone, Banknote } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ cartItems, totalAmount, onOrderSuccess }: {\n  cartItems: any[];\n  totalAmount: number;\n  onOrderSuccess: () => void;\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const [processing, setProcessing] = useState(false);\n  \n  // Form state\n  const [deliveryType, setDeliveryType] = useState(\"home\");\n  const [paymentMethod, setPaymentMethod] = useState(\"card\");\n  const [address, setAddress] = useState({\n    street: \"\",\n    city: \"\",\n    pinCode: \"\",\n  });\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [discountAmount, setDiscountAmount] = useState(0);\n  const [appliedCoupon, setAppliedCoupon] = useState<any>(null);\n\n  // Validate coupon mutation\n  const validateCouponMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", \"/api/coupons/validate\", {\n        code,\n        orderAmount: totalAmount,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setDiscountAmount(data.discountAmount);\n      setAppliedCoupon(data.coupon);\n      toast({\n        title: \"Coupon Applied!\",\n        description: `You saved ₹${data.discountAmount}`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Invalid Coupon\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      onOrderSuccess();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const applyCoupon = () => {\n    if (!couponCode.trim()) return;\n    validateCouponMutation.mutate(couponCode.trim());\n  };\n\n  const removeCoupon = () => {\n    setCouponCode(\"\");\n    setDiscountAmount(0);\n    setAppliedCoupon(null);\n  };\n\n  const finalAmount = totalAmount - discountAmount;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setProcessing(true);\n\n    try {\n      if (paymentMethod === \"cod\") {\n        // Handle Cash on Delivery\n        const orderData = {\n          totalAmount: finalAmount,\n          discountAmount,\n          deliveryType,\n          paymentMethod,\n          deliveryAddress: deliveryType === \"home\" ? \n            `${address.street}, ${address.city}, ${address.pinCode}` : \n            null,\n          couponCode: appliedCoupon?.code || null,\n          paymentStatus: \"pending\",\n          items: cartItems.map(item => ({\n            productId: item.product.id,\n            quantity: item.quantity,\n            price: item.product.price,\n          })),\n        };\n\n        createOrderMutation.mutate(orderData);\n      } else {\n        // Handle Card/UPI payments with Stripe\n        if (!stripe || !elements) {\n          setProcessing(false);\n          return;\n        }\n\n        const { error } = await stripe.confirmPayment({\n          elements,\n          confirmParams: {\n            return_url: `${window.location.origin}/orders`,\n          },\n          redirect: \"if_required\",\n        });\n\n        if (error) {\n          toast({\n            title: \"Payment Failed\",\n            description: error.message,\n            variant: \"destructive\",\n          });\n        } else {\n          // Payment succeeded, create order\n          const orderData = {\n            totalAmount: finalAmount,\n            discountAmount,\n            deliveryType,\n            paymentMethod,\n            deliveryAddress: deliveryType === \"home\" ? \n              `${address.street}, ${address.city}, ${address.pinCode}` : \n              null,\n            couponCode: appliedCoupon?.code || null,\n            paymentStatus: \"completed\",\n            items: cartItems.map(item => ({\n              productId: item.product.id,\n              quantity: item.quantity,\n              price: item.product.price,\n            })),\n          };\n\n          createOrderMutation.mutate(orderData);\n        }\n      }\n    } catch (error) {\n      console.error(\"Checkout error:\", error);\n      toast({\n        title: \"Checkout Error\",\n        description: \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Delivery Options */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Store className=\"h-5 w-5 mr-2\" />\n            Delivery Option\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <RadioGroup value={deliveryType} onValueChange={setDeliveryType}>\n            <div className=\"flex items-center space-x-3 p-4 border rounded-lg hover:border-primary-200\">\n              <RadioGroupItem value=\"home\" id=\"home\" />\n              <label htmlFor=\"home\" className=\"flex-1 cursor-pointer\">\n                <div className=\"flex items-center space-x-3\">\n                  <Home className=\"h-5 w-5 text-primary-500\" />\n                  <div>\n                    <div className=\"font-medium\">Home Delivery</div>\n                    <div className=\"text-sm text-gray-500\">15-30 mins • FREE</div>\n                  </div>\n                </div>\n              </label>\n            </div>\n            <div className=\"flex items-center space-x-3 p-4 border rounded-lg hover:border-primary-200\">\n              <RadioGroupItem value=\"pickup\" id=\"pickup\" />\n              <label htmlFor=\"pickup\" className=\"flex-1 cursor-pointer\">\n                <div className=\"flex items-center space-x-3\">\n                  <Store className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <div className=\"font-medium\">Store Pickup</div>\n                    <div className=\"text-sm text-gray-500\">Ready in 10 mins</div>\n                  </div>\n                </div>\n              </label>\n            </div>\n          </RadioGroup>\n        </CardContent>\n      </Card>\n\n      {/* Delivery Address */}\n      {deliveryType === \"home\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Delivery Address</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"street\">Street Address *</Label>\n              <Textarea\n                id=\"street\"\n                placeholder=\"Enter your complete address\"\n                value={address.street}\n                onChange={(e) => setAddress({ ...address, street: e.target.value })}\n                required\n                data-testid=\"input-street\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"city\">City *</Label>\n                <Input\n                  id=\"city\"\n                  placeholder=\"City\"\n                  value={address.city}\n                  onChange={(e) => setAddress({ ...address, city: e.target.value })}\n                  required\n                  data-testid=\"input-city\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"pinCode\">PIN Code *</Label>\n                <Input\n                  id=\"pinCode\"\n                  placeholder=\"PIN Code\"\n                  value={address.pinCode}\n                  onChange={(e) => setAddress({ ...address, pinCode: e.target.value })}\n                  required\n                  data-testid=\"input-pincode\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Coupon Code */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Apply Coupon</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {appliedCoupon ? (\n            <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n              <div>\n                <div className=\"font-medium text-green-800\">\n                  {appliedCoupon.code} Applied!\n                </div>\n                <div className=\"text-sm text-green-600\">\n                  You saved ₹{discountAmount}\n                </div>\n              </div>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={removeCoupon}\n                data-testid=\"button-remove-coupon\"\n              >\n                Remove\n              </Button>\n            </div>\n          ) : (\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Enter coupon code\"\n                value={couponCode}\n                onChange={(e) => setCouponCode(e.target.value)}\n                data-testid=\"input-coupon\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={applyCoupon}\n                disabled={validateCouponMutation.isPending || !couponCode.trim()}\n                data-testid=\"button-apply-coupon\"\n              >\n                {validateCouponMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  \"Apply\"\n                )}\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Payment Method */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <CreditCard className=\"h-5 w-5 mr-2\" />\n            Payment Method\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod}>\n            <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n              <RadioGroupItem value=\"card\" id=\"card\" />\n              <label htmlFor=\"card\" className=\"flex items-center space-x-3 cursor-pointer\">\n                <CreditCard className=\"h-5 w-5 text-gray-600\" />\n                <span>Credit/Debit Card</span>\n              </label>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n              <RadioGroupItem value=\"upi\" id=\"upi\" />\n              <label htmlFor=\"upi\" className=\"flex items-center space-x-3 cursor-pointer\">\n                <Smartphone className=\"h-5 w-5 text-gray-600\" />\n                <span>UPI Payment</span>\n              </label>\n            </div>\n            <div className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n              <RadioGroupItem value=\"cod\" id=\"cod\" />\n              <label htmlFor=\"cod\" className=\"flex items-center space-x-3 cursor-pointer\">\n                <Banknote className=\"h-5 w-5 text-gray-600\" />\n                <span>Cash on Delivery</span>\n              </label>\n            </div>\n          </RadioGroup>\n\n          {(paymentMethod === \"card\" || paymentMethod === \"upi\") && (\n            <div className=\"mt-4\">\n              <PaymentElement />\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Order Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Order Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span>Subtotal ({cartItems.length} items)</span>\n              <span data-testid=\"text-subtotal\">₹{totalAmount}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Delivery Charges</span>\n              <span className=\"text-green-600\" data-testid=\"text-delivery\">FREE</span>\n            </div>\n            {discountAmount > 0 && (\n              <div className=\"flex justify-between\">\n                <span>Discount</span>\n                <span className=\"text-green-600\" data-testid=\"text-discount\">-₹{discountAmount}</span>\n              </div>\n            )}\n            <Separator />\n            <div className=\"flex justify-between font-semibold text-base\">\n              <span>Total Amount</span>\n              <span data-testid=\"text-total\">₹{finalAmount}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Place Order Button */}\n      <Button\n        type=\"submit\"\n        className=\"w-full bg-primary-500 hover:bg-primary-600 text-lg py-6\"\n        disabled={processing || createOrderMutation.isPending}\n        data-testid=\"button-place-order\"\n      >\n        {processing || createOrderMutation.isPending ? (\n          <Loader2 className=\"h-5 w-5 animate-spin mr-2\" />\n        ) : null}\n        Place Order - ₹{finalAmount}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  // Fetch cart items\n  const { data: cartItems, isLoading, error } = useQuery({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [error, toast]);\n\n  // Calculate total\n  const totalAmount = cartItems ? cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product.price) * item.quantity);\n  }, 0) : 0;\n\n  // Create payment intent for card payments\n  useEffect(() => {\n    if (cartItems && cartItems.length > 0) {\n      apiRequest(\"POST\", \"/api/create-payment-intent\", { \n        amount: totalAmount \n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setClientSecret(data.clientSecret);\n        })\n        .catch((error) => {\n          console.error(\"Error creating payment intent:\", error);\n        });\n    }\n  }, [cartItems, totalAmount]);\n\n  const handleOrderSuccess = () => {\n    toast({\n      title: \"Order Placed Successfully!\",\n      description: \"Your order has been placed and will be delivered soon.\",\n    });\n    navigate(\"/orders\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-center py-16\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!cartItems || cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Your cart is empty</h2>\n            <p className=\"text-gray-500 mb-8\">Add some products to your cart before checkout</p>\n            <Button onClick={() => navigate(\"/\")} data-testid=\"button-shop-now\">\n              Shop Now\n            </Button>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-center py-16\">\n            <Loader2 className=\"h-8 w-8 animate-spin mr-2\" />\n            <span>Setting up checkout...</span>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Checkout</h1>\n          <p className=\"text-gray-600\">Complete your order</p>\n        </div>\n\n        <Elements stripe={stripePromise} options={{ clientSecret }}>\n          <CheckoutForm \n            cartItems={cartItems}\n            totalAmount={totalAmount}\n            onOrderSuccess={handleOrderSuccess}\n          />\n        </Elements>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18623},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useCart } from \"@/hooks/useCart\";\nimport Header from \"@/components/Header\";\nimport ProductCard from \"@/components/ProductCard\";\nimport CartSidebar from \"@/components/CartSidebar\";\nimport CheckoutModal from \"@/components/CheckoutModal\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { Clock, ShoppingBasket, Shield, Star } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isCartOpen, closeCart } = useCart();\n  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);\n\n  // Fetch categories\n  const { data: categories, isLoading: categoriesLoading, error: categoriesError } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  // Fetch featured products\n  const { data: products, isLoading: productsLoading, error: productsError } = useQuery({\n    queryKey: [\"/api/products\"],\n    retry: false,\n  });\n\n  // Fetch cart items for checkout\n  const { data: cartItems } = useQuery({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n  });\n\n  // Calculate total for checkout\n  const totalAmount = cartItems ? cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product.price) * item.quantity);\n  }, 0) : 0;\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (categoriesError && isUnauthorizedError(categoriesError)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (productsError && isUnauthorizedError(productsError)) {\n      toast({\n        title: \"Unauthorized\", \n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [categoriesError, productsError, toast]);\n\n  const handleCheckoutFromCart = () => {\n    closeCart();\n    setIsCheckoutOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary-500 to-primary-600 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-4\">Fresh Groceries Delivered in 15 Minutes</h2>\n              <p className=\"text-xl mb-6 text-primary-50\">\n                Order from thousands of products and get doorstep delivery\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  className=\"bg-white text-primary-600 hover:bg-gray-100\"\n                  data-testid=\"button-shop-now\"\n                >\n                  Shop Now\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-white text-white hover:bg-white hover:text-primary-600\"\n                  data-testid=\"button-download-app\"\n                >\n                  Download App\n                </Button>\n              </div>\n            </div>\n            <div className=\"hidden lg:block\">\n              <div className=\"relative\">\n                <div className=\"w-full h-80 bg-white/10 backdrop-blur-sm rounded-xl flex items-center justify-center\">\n                  <ShoppingBasket className=\"h-32 w-32 text-white/30\" />\n                </div>\n                <div className=\"absolute -top-4 -right-4 bg-secondary-500 text-white px-4 py-2 rounded-lg font-semibold\">\n                  Free Delivery!\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Category Navigation */}\n      <section className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8\">Shop by Category</h3>\n          \n          {categoriesLoading ? (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-6\">\n              {[...Array(5)].map((_, i) => (\n                <Card key={i} className=\"p-6\">\n                  <Skeleton className=\"w-full h-20 rounded-lg mb-3\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-3 w-1/2\" />\n                </Card>\n              ))}\n            </div>\n          ) : categories && categories.length > 0 ? (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-6\">\n              {categories.slice(0, 5).map((category: any) => (\n                <Link key={category.id} href={`/category/${category.slug}`}>\n                  <Card \n                    className=\"p-6 hover:shadow-md transition-shadow cursor-pointer border hover:border-primary-200\"\n                    data-testid={`card-category-${category.slug}`}\n                  >\n                    <CardContent className=\"p-0\">\n                      <div className=\"w-full h-20 bg-gray-100 rounded-lg mb-3 flex items-center justify-center overflow-hidden\">\n                        {category.imageUrl ? (\n                          <img\n                            src={category.imageUrl}\n                            alt={category.name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <ShoppingBasket className=\"h-8 w-8 text-gray-400\" />\n                        )}\n                      </div>\n                      <h4 className=\"font-semibold text-gray-900\">{category.name}</h4>\n                      <p className=\"text-sm text-gray-500\">{category.description || 'Fresh & Organic'}</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <ShoppingBasket className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No categories available</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-12 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900\">Trending Products</h3>\n            <Link href=\"/category/all\">\n              <Button \n                variant=\"ghost\" \n                className=\"text-primary-600 hover:text-primary-700\"\n                data-testid=\"button-view-all\"\n              >\n                View All\n              </Button>\n            </Link>\n          </div>\n          \n          {productsLoading ? (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n              {[...Array(10)].map((_, i) => (\n                <Card key={i} className=\"p-4\">\n                  <Skeleton className=\"w-full h-32 rounded-lg mb-3\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-3 w-1/2 mb-4\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </Card>\n              ))}\n            </div>\n          ) : products && products.length > 0 ? (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6\">\n              {products.slice(0, 10).map((product: any) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <ShoppingBasket className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No products available</p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Why Choose FreshMart */}\n      <section className=\"py-12 bg-primary-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">Why Choose FreshMart?</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-full h-48 bg-white rounded-xl mb-4 flex items-center justify-center\">\n                <Clock className=\"h-16 w-16 text-primary-500\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">15-Minute Delivery</h4>\n              <p className=\"text-gray-600\">Ultra-fast delivery to your doorstep with our hyperlocal network</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-full h-48 bg-white rounded-xl mb-4 flex items-center justify-center\">\n                <Star className=\"h-16 w-16 text-secondary-500\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Fresh Quality</h4>\n              <p className=\"text-gray-600\">Hand-picked fresh products with quality guarantee</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-full h-48 bg-white rounded-xl mb-4 flex items-center justify-center\">\n                <Shield className=\"h-16 w-16 text-green-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">24/7 Support</h4>\n              <p className=\"text-gray-600\">Round-the-clock customer support for all your needs</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <CartSidebar \n        isOpen={isCartOpen} \n        onClose={closeCart}\n        onCheckout={handleCheckoutFromCart}\n      />\n      \n      <CheckoutModal\n        isOpen={isCheckoutOpen}\n        onClose={() => setIsCheckoutOpen(false)}\n        cartItems={cartItems || []}\n        totalAmount={totalAmount}\n      />\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10481},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ShoppingBasket, Truck, Clock, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-white\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <ShoppingBasket className=\"h-8 w-8 text-primary-600 mr-3\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">FreshMart</h1>\n            </div>\n            <Button \n              onClick={handleLogin}\n              className=\"bg-primary-500 hover:bg-primary-600\"\n              data-testid=\"button-login\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"max-w-3xl mx-auto\">\n            <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n              Fresh Groceries Delivered in{\" \"}\n              <span className=\"text-primary-600\">15 Minutes</span>\n            </h2>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              Order from thousands of fresh products and get doorstep delivery at lightning speed\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={handleLogin}\n                size=\"lg\" \n                className=\"bg-primary-500 hover:bg-primary-600 text-lg px-8 py-6\"\n                data-testid=\"button-get-started\"\n              >\n                Get Started\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"text-lg px-8 py-6 border-primary-200 text-primary-600 hover:bg-primary-50\"\n                data-testid=\"button-learn-more\"\n              >\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-gray-900 mb-4\">Why Choose FreshMart?</h3>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              We're committed to bringing you the freshest groceries with unmatched convenience\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"text-center border-primary-100 hover:border-primary-200 transition-colors\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mb-4\">\n                  <Clock className=\"h-8 w-8 text-primary-600\" />\n                </div>\n                <CardTitle className=\"text-xl text-gray-900\">15-Minute Delivery</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"text-gray-600\">\n                  Ultra-fast delivery to your doorstep with our hyperlocal network\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center border-primary-100 hover:border-primary-200 transition-colors\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-secondary-100 rounded-full flex items-center justify-center mb-4\">\n                  <ShoppingBasket className=\"h-8 w-8 text-secondary-600\" />\n                </div>\n                <CardTitle className=\"text-xl text-gray-900\">Fresh Quality</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"text-gray-600\">\n                  Hand-picked fresh products with quality guarantee and farm-to-door freshness\n                </CardDescription>\n              </CardContent>\n            </Card>\n\n            <Card className=\"text-center border-primary-100 hover:border-primary-200 transition-colors\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n                  <Shield className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <CardTitle className=\"text-xl text-gray-900\">24/7 Support</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"text-gray-600\">\n                  Round-the-clock customer support for all your grocery needs\n                </CardDescription>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-primary-600\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h3 className=\"text-3xl font-bold text-white mb-4\">\n            Ready to Experience Fresh Grocery Delivery?\n          </h3>\n          <p className=\"text-xl text-primary-100 mb-8 max-w-2xl mx-auto\">\n            Join thousands of satisfied customers who trust FreshMart for their daily grocery needs\n          </p>\n          <Button \n            onClick={handleLogin}\n            size=\"lg\"\n            className=\"bg-white text-primary-600 hover:bg-gray-100 text-lg px-8 py-6\"\n            data-testid=\"button-join-now\"\n          >\n            Join FreshMart Today\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"flex items-center mb-4 md:mb-0\">\n              <ShoppingBasket className=\"h-6 w-6 mr-2\" />\n              <span className=\"text-lg font-semibold\">FreshMart</span>\n            </div>\n            <p className=\"text-gray-400 text-center md:text-right\">\n              © 2024 FreshMart. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6605},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/orders.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ShoppingBag, Package, Truck, CheckCircle, Clock, Star } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Link } from \"wouter\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst OrderStatusIcon = ({ status }: { status: string }) => {\n  switch (status) {\n    case \"pending\":\n      return <Clock className=\"h-4 w-4\" />;\n    case \"processing\":\n      return <Package className=\"h-4 w-4\" />;\n    case \"delivered\":\n      return <CheckCircle className=\"h-4 w-4\" />;\n    case \"cancelled\":\n      return <Package className=\"h-4 w-4\" />;\n    default:\n      return <Package className=\"h-4 w-4\" />;\n  }\n};\n\nconst OrderStatusBadge = ({ status }: { status: string }) => {\n  const variants = {\n    pending: \"secondary\",\n    processing: \"default\", \n    delivered: \"default\",\n    cancelled: \"destructive\",\n  } as const;\n\n  const colors = {\n    pending: \"bg-yellow-100 text-yellow-800\",\n    processing: \"bg-blue-100 text-blue-800\",\n    delivered: \"bg-green-100 text-green-800\", \n    cancelled: \"bg-red-100 text-red-800\",\n  } as const;\n\n  return (\n    <Badge className={colors[status as keyof typeof colors] || colors.pending}>\n      <OrderStatusIcon status={status} />\n      <span className=\"ml-1 capitalize\">{status}</span>\n    </Badge>\n  );\n};\n\nconst FeedbackModal = ({ order, onClose }: { order: any; onClose: () => void }) => {\n  const [rating, setRating] = useState(5);\n  const [comment, setComment] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const feedbackMutation = useMutation({\n    mutationFn: async (feedbackData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/feedback\", feedbackData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Feedback Submitted!\",\n        description: \"Thank you for your feedback.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    feedbackMutation.mutate({\n      orderId: order.id,\n      rating,\n      comment,\n    });\n  };\n\n  return (\n    <DialogContent>\n      <DialogHeader>\n        <DialogTitle>Rate Your Order</DialogTitle>\n      </DialogHeader>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label>Rating</Label>\n          <RadioGroup value={rating.toString()} onValueChange={(value) => setRating(parseInt(value))}>\n            <div className=\"flex space-x-4\">\n              {[1, 2, 3, 4, 5].map((star) => (\n                <div key={star} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={star.toString()} id={`star-${star}`} />\n                  <label htmlFor={`star-${star}`} className=\"flex items-center cursor-pointer\">\n                    {star} <Star className=\"h-4 w-4 ml-1\" />\n                  </label>\n                </div>\n              ))}\n            </div>\n          </RadioGroup>\n        </div>\n        <div>\n          <Label htmlFor=\"comment\">Comment (Optional)</Label>\n          <Textarea\n            id=\"comment\"\n            placeholder=\"Tell us about your experience...\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            data-testid=\"textarea-feedback\"\n          />\n        </div>\n        <div className=\"flex justify-end space-x-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={feedbackMutation.isPending}\n            data-testid=\"button-submit-feedback\"\n          >\n            Submit Feedback\n          </Button>\n        </div>\n      </form>\n    </DialogContent>\n  );\n};\n\nexport default function Orders() {\n  const { toast } = useToast();\n  const [feedbackOrderId, setFeedbackOrderId] = useState<string | null>(null);\n\n  // Fetch orders\n  const { data: orders, isLoading, error } = useQuery({\n    queryKey: [\"/api/orders\"],\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <Skeleton className=\"h-8 w-48 mb-2\" />\n            <Skeleton className=\"h-4 w-64\" />\n          </div>\n          <div className=\"space-y-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <div className=\"flex justify-between\">\n                    <Skeleton className=\"h-6 w-32\" />\n                    <Skeleton className=\"h-6 w-20\" />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-20 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error && !isUnauthorizedError(error)) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-16\">\n            <ShoppingBag className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Error Loading Orders</h2>\n            <p className=\"text-gray-500 mb-8\">Something went wrong. Please try again later.</p>\n            <Link href=\"/\">\n              <Button>Go Back Home</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Orders</h1>\n          <p className=\"text-gray-600\">Track and manage your orders</p>\n        </div>\n\n        {!orders || orders.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <ShoppingBag className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Orders Yet</h3>\n            <p className=\"text-gray-500 mb-8\">\n              You haven't placed any orders yet. Start shopping to see your orders here.\n            </p>\n            <Link href=\"/\">\n              <Button data-testid=\"button-start-shopping\">Start Shopping</Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {orders.map((order: any) => (\n              <Card key={order.id} data-testid={`card-order-${order.orderNumber}`}>\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">\n                        Order #{order.orderNumber}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        Placed on {format(new Date(order.createdAt), 'MMM dd, yyyy')} • \n                        {order.deliveryType === 'home' ? ' Home Delivery' : ' Store Pickup'}\n                      </p>\n                    </div>\n                    <div className=\"flex flex-col items-end space-y-2\">\n                      <OrderStatusBadge status={order.status} />\n                      <p className=\"text-lg font-semibold\" data-testid={`text-total-${order.orderNumber}`}>\n                        ₹{order.totalAmount}\n                      </p>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Order Items */}\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-3\">Items ({order.orderItems?.length || 0})</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {order.orderItems?.map((item: any, index: number) => (\n                          <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"w-12 h-12 bg-white rounded-lg flex items-center justify-center\">\n                              <ShoppingBag className=\"h-6 w-6 text-gray-400\" />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"font-medium text-gray-900 truncate\">\n                                {item.product?.name || 'Product'}\n                              </p>\n                              <p className=\"text-sm text-gray-500\">\n                                Qty: {item.quantity} • ₹{item.price}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Order Actions */}\n                    <div className=\"flex items-center justify-between pt-4 border-t\">\n                      <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                        {order.paymentStatus === 'completed' ? (\n                          <span className=\"flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n                            Payment Completed\n                          </span>\n                        ) : (\n                          <span className=\"flex items-center\">\n                            <Clock className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                            Payment {order.paymentStatus}\n                          </span>\n                        )}\n                        \n                        {order.deliveryAddress && (\n                          <span className=\"flex items-center\">\n                            <Truck className=\"h-4 w-4 mr-1\" />\n                            {order.deliveryType === 'home' ? 'Home Delivery' : 'Store Pickup'}\n                          </span>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        {order.status === 'delivered' && (\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => setFeedbackOrderId(order.id)}\n                                data-testid={`button-feedback-${order.orderNumber}`}\n                              >\n                                <Star className=\"h-4 w-4 mr-1\" />\n                                Rate Order\n                              </Button>\n                            </DialogTrigger>\n                            {feedbackOrderId === order.id && (\n                              <FeedbackModal \n                                order={order} \n                                onClose={() => setFeedbackOrderId(null)} \n                              />\n                            )}\n                          </Dialog>\n                        )}\n                        \n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          data-testid={`button-reorder-${order.orderNumber}`}\n                        >\n                          Reorder\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13570},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}